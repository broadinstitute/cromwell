include required(classpath("application.conf"))
include "build_application.inc.conf"
include "papi_application.inc.conf"

services {
  HealthMonitor.config {
    check-carboniter-gcs-access: false
    check-papi-backends: [
      "Papi",
      "Papiv2",
      "Papiv2USADockerhub",
      "Papiv2NoDockerHubConfig",
      "Papiv2RequesterPays",
      "Papi-Caching-No-Copy",
      "Papiv2-Virtual-Private-Cloud",
      "Papiv2-Reference-Disk-Localization",
    ]
  }
}

backend {
  default = "Papi"
  enabled = ["Papi", "Papiv2", "Papi-Caching-No-Copy", "Papiv2RequesterPays", "Papiv2-Reference-Disk-Localization"]
  providers {
    # Default papi v2 backend
    Papi {
      actor-factory = "REPLACEME!"
      config {
        # When importing: Remember to also include an appropriate provider_config.inc.conf here.

        include "dockerhub_provider_config_v2.inc.conf"
        # This SA does not have permission to bill this project when accessing RP buckets.
        # This is on purpose so that we can assert the failure (see requester_pays_localization_negative)
        genomics.compute-service-account = "centaur@broad-dsde-cromwell-dev.iam.gserviceaccount.com"
        filesystems.http {}
      }
    }
    # Same as Papi, but with a v2 specific name so it can be targeted in centaur tests
    Papiv2 {
      actor-factory = "REPLACEME!"
      config {
        # When importing: Remember to also include an appropriate provider_config.inc.conf here.

        include "dockerhub_provider_config_v2.inc.conf"
        # This SA does not have permission to bill this project when accessing RP buckets.
        # This is on purpose so that we can assert the failure (see requester_pays_localization_negative)
        genomics.compute-service-account = "centaur@broad-dsde-cromwell-dev.iam.gserviceaccount.com"
        filesystems.http {}
        name-for-call-caching-purposes = "Papi"
      }
    }
    # Same as Papi but specifying `user_service_account` auth in config.
    Papiv2USADockerhub {
      actor-factory = "REPLACEME!"
      config {
        # When importing: Remember to also include an appropriate provider_config.inc.conf here.

        include "dockerhub_provider_config_v2_usa.inc.conf"
        # This SA does not have permission to bill this project when accessing RP buckets.
        # This is on purpose so that we can assert the failure (see requester_pays_localization_negative)
        genomics.compute-service-account = "centaur@broad-dsde-cromwell-dev.iam.gserviceaccount.com"
        filesystems.http {}
        name-for-call-caching-purposes = "Papi"
      }
    }
    # Same as Papiv2 but with no Docker Hub configuration so access to private Docker Hub images will
    # require correct handling of workflow options.
    Papiv2NoDockerHubConfig {
      actor-factory = "REPLACEME!"
      config {
        # When importing: Remember to also include an appropriate provider_config.inc.conf here.

        # This SA does not have permission to bill this project when accessing RP buckets.
        # This is on purpose so that we can assert the failure (see requester_pays_localization_negative)
        genomics.compute-service-account = "centaur@broad-dsde-cromwell-dev.iam.gserviceaccount.com"
        filesystems.http {}

        # This backend explictly does NOT authenticate to docker.io. See BT-141 for more info.
        #include "dockerhub_provider_config_v1.inc.conf"
      }
    }
    Papiv2RequesterPays {
      actor-factory = "REPLACEME!"
      config {
        # When importing: Remember to also include an appropriate provider_config.inc.conf here.

        include "dockerhub_provider_config_v2.inc.conf"
        filesystems.gcs.auth = "requester_pays_service_account"
        genomics.compute-service-account = "requester-pays-authorized@broad-dsde-cromwell-dev.iam.gserviceaccount.com"
        filesystems.http {}
      }
    }
    Papi-Caching-No-Copy {
      actor-factory = "REPLACEME!"
      config {
        # When importing: Remember to also include an appropriate provider_config.inc.conf here.

        filesystems.gcs.caching.duplication-strategy = "reference"
        filesystems.http {}

        # Have the engine authenticate to docker.io. See BT-141 for more info.
        include "dockerhub_provider_config_v1.inc.conf"
      }
    }
    Papiv2-Virtual-Private-Cloud {
      actor-factory = "REPLACEME!"
      config {
        # When importing: Remember to also include an appropriate provider_config.inc.conf here.

        genomics.compute-service-account = "centaur@broad-dsde-cromwell-dev.iam.gserviceaccount.com"
        filesystems.http {}
        virtual-private-cloud {
          network-label-key = "cromwell-ci-network"
          subnetwork-label-key = "cromwell-ci-subnetwork"
          auth = "service_account"
        }

        # Have the engine authenticate to docker.io. See BT-141 for more info.
        include "dockerhub_provider_config_v1.inc.conf"
      }
    }
    papi-v2-usa {
      actor-factory = "REPLACEME!"
      config {
        # When importing: Remember to also include an appropriate provider_config.inc.conf here.

        project = "user_error: google_project must be set in workflow options http://cromwell.readthedocs.io/en/develop/wf_options/Google/"
        root = "user_error: jes_gcs_root must be set in workflow options http://cromwell.readthedocs.io/en/develop/wf_options/Google/"
        genomics.compute-service-account = "user_error: google_compute_service_account must be set in workflow options http://cromwell.readthedocs.io/en/develop/wf_options/Google/"
        genomics.auth = "user_service_account"
        filesystems.http {}
        filesystems.drs.auth = "user_service_account"
        filesystems.gcs.auth = "user_service_account"
        filesystems.gcs.project = "user_error: user_service_account must be set in workflow options http://cromwell.readthedocs.io/en/develop/wf_options/Google/"

        # Have the engine authenticate to docker.io. See BT-141 for more info.
        include "dockerhub_provider_config_v1.inc.conf"
      }
    }
    papi-v2-gcsa {
      actor-factory = "REPLACEME!"
      config {
        # When importing: Remember to also include an appropriate provider_config.inc.conf here.

        project = "user_error: google_project must be set in workflow options http://cromwell.readthedocs.io/en/develop/wf_options/Google/"
        root = "user_error: jes_gcs_root must be set in workflow options http://cromwell.readthedocs.io/en/develop/wf_options/Google/"
        genomics.compute-service-account = "user_error: google_compute_service_account must be set in workflow options http://cromwell.readthedocs.io/en/develop/wf_options/Google/"
        genomics.auth = "google_compute_service_account"
        filesystems.http {}
        filesystems.drs.auth = "user_service_account"
        filesystems.gcs.auth = "user_service_account"
        filesystems.gcs.project = "user_error: user_service_account must be set in workflow options http://cromwell.readthedocs.io/en/develop/wf_options/Google/"

        # Have the engine authenticate to docker.io. See BT-141 for more info.
        include "dockerhub_provider_config_v1.inc.conf"
      }
    }
    # Same as Papi but with GCS parallel composite uploads turned on.
    Papiv2ParallelCompositeUploads {
      actor-factory = "REPLACEME!"
      config {
        # When importing: Remember to also include an appropriate provider_config.inc.conf here.

        include "dockerhub_provider_config_v2.inc.conf"
        # This SA does not have permission to bill this project when accessing RP buckets.
        # This is on purpose so that we can assert the failure (see requester_pays_localization_negative)
        genomics.compute-service-account = "centaur@broad-dsde-cromwell-dev.iam.gserviceaccount.com"
        # Files larger than 150M should be delocalized using parallel composite uploading.
        genomics.parallel-composite-upload-threshold = 150M
        filesystems.http {}
        name-for-call-caching-purposes = "Papi"
      }
    }
    Papiv2-Reference-Disk-Localization {
      actor-factory = "REPLACEME!"
      config {
        # When importing: Remember to also include an appropriate provider_config.inc.conf here.

        genomics.compute-service-account = "centaur@broad-dsde-cromwell-dev.iam.gserviceaccount.com"
        filesystems.http {}
        # Old Cromwell 55 and 56 level-of-indirection-to-GCS reference disk manifest specification
        # Currently required for engine upgrade test cases but should be deleted after Cromwell 57 is published.
        reference-disk-localization-manifest-files = ["gs://gcp-public-data--broad-references/refdisk_manifest.json"]
        # Cromwell 57+ reference disk manifest specification included here.
        include "papi_v2_reference_image_manifest.conf"

        # Have the engine authenticate to docker.io. See BT-141 for more info.
        include "dockerhub_provider_config_v1.inc.conf"
      }
    }
  }
}
