name: combine-scalasteward-prs

  # With a thousand thanks to Qi who showed us this in Leonardo: https://github.com/DataBiosphere/leonardo/pull/1975
  # Allows manually triggering of workflow on a selected branch via the GitHub Actions tab.
  # GitHub blog demo: https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/.

on:
  workflow_dispatch:
    inputs:
      prLimit:
        description: 'How many scala-steward PRs to consolidate in total'
        required: true
        default: 1000
      prGroupSize:
        description: 'How many scala-steward PRs to consolidate in each PR'
        required: true
        default: 10

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Merge scala-steward PRs
        id: msp
        run: |
          export GITHUB_TOKEN=${{ secrets.BROADBOT_GITHUB_TOKEN }}
          PR_LIMIT=${{ github.event.inputs.prLimit }}
          PR_GROUP_SIZE=${{ github.event.inputs.prGroupSize }}
          echo "BASH_VERSION=${BASH_VERSION}"

          git config user.name "broadbot"
          git fetch

          echo "Bringing in PRs:"
          gh pr list --limit 1000 | grep 'scala-steward:' | tac | head -n${PR_LIMIT}

          PR_LIST=($(gh pr list --limit 1000 | grep 'scala-steward:' | cut -d$'\t'  -f 1 | tac | head -n${PR_LIMIT} | tac | tr '\n' ' '))
          PR_LIST_LENGTH=${#PR_LIST[@]}

          echo "PR_LIST=${PR_LIST[@]}"
          echo "PR_LIST_COUNT=${#PR_LIST[@]}"
          NEXT_INDEX=0
          NEXT_SLICE=("${PR_LIST[@]:$NEXT_INDEX:$PR_GROUP_SIZE}")
          while [[ "${#NEXT_SLICE[@]}" -gt "0" ]]
          do
            FIRST_PR="${NEXT_SLICE[0]}"
            LAST_PR="${NEXT_SLICE[-1]}"
            #echo "NEXT_SLICE=${NEXT_SLICE[@]}"
            #echo "NEXT_SLICE_COUNT=${#NEXT_SLICE[@]}"

            NEW_BRANCH="consolidated-scala-steward-prs-${FIRST_PR}-${LAST_PR}-$(date +'%Y-%m-%d_%H-%M')"
            echo "NEW_BRANCH=${NEW_BRANCH}"
            git checkout develop
            git pull
            git checkout -B ${NEW_BRANCH}

            SUCCESSFUL_PRS=()
            UNSUCCESSFUL_PRS=()

            for pr in ${NEXT_SLICE[@]}
            do
              git fetch origin pull/${pr}/head:pr_${pr}

              git rebase "pr_${pr}" "${NEW_BRANCH}"

              if [ "${EXIT_CODE}" == "0" ]
              then
                SUCCESSFUL_PRS+=( "
              * #$pr" )
              else
                echo "Unexpected exit code: ${EXIT_CODE}"
                git reset --hard HEAD
                UNSUCCESSFUL_PRS+=( "
              * #$pr" )
              fi
              echo "Bringing in: $pr"
            done <<< ${NEXT_SLICE[@]}

            NEXT_INDEX=$(( NEXT_INDEX + PR_GROUP_SIZE ))
            NEXT_SLICE=("${PR_LIST[@]:$NEXT_INDEX:$PR_GROUP_SIZE}")
          done
