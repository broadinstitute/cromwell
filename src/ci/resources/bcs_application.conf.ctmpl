include required(classpath("application.conf"))
include "build_application.inc.conf"

{{with $cromwellBcs := vault (printf "secret/dsde/cromwell/common/cromwell-bcs")}}
backend {
  default = "BCS"

  providers {
    BCS {
      actor-factory = "cromwell.backend.impl.bcs.BcsBackendLifecycleActorFactory"

      config {
        root = "oss://cloud-cromwell-dev-self-cleaning/cromwell-dir"
        region = "us-east-1"
        access-id = "{{$cromwellBcs.Data.access_id}}"
        access-key = "{{$cromwellBcs.Data.access_key}}"

        concurrent-job-limit = 50

        filesystems {
          oss {
            auth {
              endpoint = "oss-us-east-1.aliyuncs.com"
              access-id = "{{$cromwellBcs.Data.access_id}}"
              access-key = "{{$cromwellBcs.Data.access_key}}"
            }
          }
        }

        default-runtime-attributes {
          # Not 100% sure of the instance types, but as of April 2018 according to heshan.lhs@alibaba-inc.com the BCS
          # itself needs some compute resources on the spun up VM. So we're using medium instances.
          # - https://www.alibabacloud.com/help/doc-detail/25378.htm
          # TODO: Is there an even smaller/faster image that we can use for BCS
          #cluster: "OnDemand ecs.sn1.medium img-ubuntu"
          # Alternatively leave a fixed cluster spun up via:
          # bcs cc cromwell_test_cluster -i img-ubuntu -t ecs.sn1.medium -n 1 -d 'cromwell test cluster'
          cluster: "OnDemand ecs.sn1.medium img-ubuntu"
          cluster: ${?CROMWELL_BUILD_BCS_CLUSTER_ID}

          # TODO: We should continue to allow users and our CI tests to cache images in their own OSS bucket
          # BUT we should also be able to check the hash of the image in OSS using the config supplied credentials
          # - https://www.alibabacloud.com/help/doc-detail/50452.htm?spm=a3c0i.l31815en.a3.109.50db5139VKk1FK
          # - https://www.alibabacloud.com/product/oss?spm=a3c0i.7911826.1023975.dproductb1.454c737bJknGYt#resources
          # Downloading from DockerHub is incredibly slow in Hangzhou. However for portability of WDL, we should use a
          # new BCS runtime attribute for a `ossDockerRegistry` instead of this format?
          # docker: "ubuntu/latest oss://broad-test/registry/ubuntu/"

          # If we do allow the above then we should NOT be trying to hash against DockerHub for the BCS backend.
          # We should test if we can ping the OSS registry using our existing client code.
          # TODO: https://github.com/broadinstitute/cromwell/issues/3518 For now, ignore docker.
          ignoreDocker: true

          timeout: 3000 # None of our test workflow calls should be running longer than 3000 seconds
          # Saw heshan.lhs@alibaba-inc.com set this. Not sure how it is used internally / if it is necessary
          vpc: "192.168.1.0/24"

          # TODO: Embed the worker as a compiled resource
          # TODO: Include the python as source code and not in the tar
          workerPath: ${user.dir}/supportedBackends/bcs/src/main/scala/cromwell/backend/impl/bcs/worker.tar.gz
        }
      }
    }
  }
}

engine {
  filesystems {
    oss {
      auth {
        endpoint = "oss-us-east-1.aliyuncs.com"
        access-id = "{{$cromwellBcs.Data.access_id}}"
        access-key = "{{$cromwellBcs.Data.access_key}}"
      }
    }
  }
}
{{end}}
