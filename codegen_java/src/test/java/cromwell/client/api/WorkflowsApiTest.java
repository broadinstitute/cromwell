/*
 * Cromwell Server REST API
 * Describes the REST API provided by a Cromwell server
 *
 * The version of the OpenAPI document: 30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cromwell.client.api;

import cromwell.client.ApiException;
import cromwell.client.model.BackendResponse;
import cromwell.client.model.LabelsResponse;
import java.time.OffsetDateTime;
import cromwell.client.model.WorkflowIdAndStatus;
import cromwell.client.model.WorkflowMetadataResponse;
import cromwell.client.model.WorkflowQueryParameter;
import cromwell.client.model.WorkflowQueryResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkflowsApi
 */
@Disabled
public class WorkflowsApiTest {

    private final WorkflowsApi api = new WorkflowsApi();

    /**
     * Abort a running workflow
     *
     * Request Cromwell to abort a running workflow. For instance this might be necessary in cases where you have submitted a workflow with incorrect inputs or no longer need the results. Cromwell will schedule a halt of all currently running jobs from this workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void abortTest() throws ApiException {
        String version = null;
        String id = null;
        WorkflowIdAndStatus response = api.abort(version, id);
        // TODO: test validations
    }

    /**
     * List the supported backends
     *
     * Returns the backends supported by this Cromwell server, as well as the default backend.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void backendsTest() throws ApiException {
        String version = null;
        BackendResponse response = api.backends(version);
        // TODO: test validations
    }

    /**
     * Explain hashing differences for 2 calls
     *
     * This endpoint returns the hash differences between 2 completed (successfully or not) calls.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void callCacheDiffTest() throws ApiException {
        String version = null;
        String workflowA = null;
        String callA = null;
        String workflowB = null;
        String callB = null;
        Integer indexA = null;
        Integer indexB = null;
        WorkflowIdAndStatus response = api.callCacheDiff(version, workflowA, callA, workflowB, callB, indexA, indexB);
        // TODO: test validations
    }

    /**
     * Retrieves the current labels for a workflow
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void labelsTest() throws ApiException {
        String version = null;
        String id = null;
        LabelsResponse response = api.labels(version, id);
        // TODO: test validations
    }

    /**
     * Get the logs for a workflow
     *
     * Returns paths to the standard out and standard error files that were generated during the execution of all calls in a workflow. A call has one or more standard out and standard error logs, depending on if the call was scattered or not. In the latter case, one log is provided for each instance of the call that has been run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsTest() throws ApiException {
        String version = null;
        String id = null;
        WorkflowIdAndStatus response = api.logs(version, id);
        // TODO: test validations
    }

    /**
     * Get workflow and call-level metadata for a specified workflow
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void metadataTest() throws ApiException {
        String version = null;
        String id = null;
        List<String> includeKey = null;
        List<String> excludeKey = null;
        Boolean expandSubWorkflows = null;
        WorkflowMetadataResponse response = api.metadata(version, id, includeKey, excludeKey, expandSubWorkflows);
        // TODO: test validations
    }

    /**
     * Get the outputs for a workflow
     *
     * Retrieve the outputs for the specified workflow. Cromwell will return any outputs which currently exist even if a workflow has not successfully completed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void outputsTest() throws ApiException {
        String version = null;
        String id = null;
        WorkflowIdAndStatus response = api.outputs(version, id);
        // TODO: test validations
    }

    /**
     * Get workflows matching some criteria
     *
     * Query for workflows which match various criteria. When a combination of criteria are applied the endpoint will return
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryGetTest() throws ApiException {
        String version = null;
        OffsetDateTime submission = null;
        OffsetDateTime start = null;
        OffsetDateTime end = null;
        List<String> status = null;
        List<String> name = null;
        List<String> id = null;
        List<String> label = null;
        List<String> labelor = null;
        List<String> excludeLabelAnd = null;
        List<String> excludeLabelOr = null;
        List<String> additionalQueryResultFields = null;
        Boolean includeSubworkflows = null;
        WorkflowQueryResponse response = api.queryGet(version, submission, start, end, status, name, id, label, labelor, excludeLabelAnd, excludeLabelOr, additionalQueryResultFields, includeSubworkflows);
        // TODO: test validations
    }

    /**
     * Get workflows matching some criteria
     *
     * Query workflows by start dates, end dates, names, ids, labels, or statuses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryPostTest() throws ApiException {
        String version = null;
        List<WorkflowQueryParameter> parameters = null;
        WorkflowQueryResponse response = api.queryPost(version, parameters);
        // TODO: test validations
    }

    /**
     * Switch a workflow from &#39;On Hold&#39; to &#39;Submitted&#39; status
     *
     * Request Cromwell to release the hold on a workflow. It will switch the status of a workflow from &#39;On Hold&#39; to &#39;Submitted&#39; so it can be picked for running. For instance this might be necessary in cases where you have submitted a workflow with workflowOnHold &#x3D; true.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releaseHoldTest() throws ApiException {
        String version = null;
        String id = null;
        WorkflowIdAndStatus response = api.releaseHold(version, id);
        // TODO: test validations
    }

    /**
     * Retrieves the current state for a workflow
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void statusTest() throws ApiException {
        String version = null;
        String id = null;
        WorkflowIdAndStatus response = api.status(version, id);
        // TODO: test validations
    }

    /**
     * Submit a workflow for execution
     *
     * Submits a workflow to Cromwell. Note that this endpoint can accept an unlimited number of input files via workflowInputs_N but swagger needs them to be explicitly defined so we have provided 5 as an example.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitTest() throws ApiException {
        String version = null;
        String workflowSource = null;
        String workflowUrl = null;
        Boolean workflowOnHold = null;
        String workflowInputs = null;
        String workflowInputs2 = null;
        String workflowInputs3 = null;
        String workflowInputs4 = null;
        String workflowInputs5 = null;
        String workflowOptions = null;
        String workflowType = null;
        String workflowRoot = null;
        String workflowTypeVersion = null;
        String labels = null;
        String workflowDependencies = null;
        String requestedWorkflowId = null;
        WorkflowIdAndStatus response = api.submit(version, workflowSource, workflowUrl, workflowOnHold, workflowInputs, workflowInputs2, workflowInputs3, workflowInputs4, workflowInputs5, workflowOptions, workflowType, workflowRoot, workflowTypeVersion, labels, workflowDependencies, requestedWorkflowId);
        // TODO: test validations
    }

    /**
     * Submit a batch of workflows for execution
     *
     * In instances where you want to run the same workflow multiple times with varying inputs you may submit a workflow batch. This endpoint is fundamentally the same as the standard submission endpoint with the exception that the inputs JSON will be an array of objects instead of a single object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitBatchTest() throws ApiException {
        String version = null;
        String workflowInputs = null;
        String workflowSource = null;
        String workflowUrl = null;
        Boolean workflowOnHold = null;
        String workflowOptions = null;
        String workflowType = null;
        String workflowTypeVersion = null;
        String labels = null;
        String workflowDependencies = null;
        String requestedWorkflowId = null;
        List<WorkflowIdAndStatus> response = api.submitBatch(version, workflowInputs, workflowSource, workflowUrl, workflowOnHold, workflowOptions, workflowType, workflowTypeVersion, labels, workflowDependencies, requestedWorkflowId);
        // TODO: test validations
    }

    /**
     * Get a visual diagram of a running workflow
     *
     * Returns a javascript file which will render a Gantt chart for the requested workflow. The bars in the chart represent start and end times for individual task invocations. This javascript is intended to be embedded into another web page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timingTest() throws ApiException {
        String version = null;
        String id = null;
        WorkflowIdAndStatus response = api.timing(version, id);
        // TODO: test validations
    }

    /**
     * Update labels for a workflow
     *
     * Update multiple labels for an existing workflow. When supplying a label with a key unique to the workflow submission, a new label key/value entry is appended to that workflow&#39;s metadata. When supplying a label with a key that is already associated to the workflow submission, the original label value is updated with the new value for that workflow&#39;s metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLabelsTest() throws ApiException {
        String version = null;
        String id = null;
        Object labels = null;
        LabelsResponse response = api.updateLabels(version, id, labels);
        // TODO: test validations
    }

}
