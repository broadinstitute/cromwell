include required(classpath("application.conf"))
include "build_application.inc.conf"
include "papi_application.inc.conf"

services.HealthMonitor.config.check-papi-backends: ["Papi", "Papiv2", "Papiv2USADockerhub", "Papiv2NoDockerHubConfig", "Papiv2RequesterPays", "Papi-Caching-No-Copy"]

backend {
  default = "Papi"
  enabled = ["Papi", "Papiv2", "Papi-Caching-No-Copy", "Papiv2RequesterPays"]
  providers {
    # Default papi v2 backend
    Papi {
      actor-factory = "cromwell.backend.google.pipelines.v2alpha1.PipelinesApiLifecycleActorFactory"
      config {
        include "papi_provider_config.inc.conf"
        include "dockerhub_provider_config_v2.inc.conf"
        # This SA does not have permission to bill this project when accessing RP buckets.
        # This is on purpose so that we can assert the failure (see requester_pays_localization_negative)
        genomics.compute-service-account = "centaur@broad-dsde-cromwell-dev.iam.gserviceaccount.com"
        filesystems.http {}
      }
    }
    # Same as Papi, but with a v2 specific name so it can be targeted in centaur tests
    Papiv2 {
      actor-factory = "cromwell.backend.google.pipelines.v2alpha1.PipelinesApiLifecycleActorFactory"
      config {
        include "papi_provider_config.inc.conf"
        include "dockerhub_provider_config_v2.inc.conf"
        # This SA does not have permission to bill this project when accessing RP buckets.
        # This is on purpose so that we can assert the failure (see requester_pays_localization_negative)
        genomics.compute-service-account = "centaur@broad-dsde-cromwell-dev.iam.gserviceaccount.com"
        filesystems.http {}
        name-for-call-caching-purposes = "Papi"
      }
    }
    # Same as Papi but specifying `user_service_account` auth in config.
    Papiv2USADockerhub {
      actor-factory = "cromwell.backend.google.pipelines.v2alpha1.PipelinesApiLifecycleActorFactory"
      config {
        include "papi_provider_config.inc.conf"
        include "dockerhub_provider_config_v2_usa.inc.conf"
        # This SA does not have permission to bill this project when accessing RP buckets.
        # This is on purpose so that we can assert the failure (see requester_pays_localization_negative)
        genomics.compute-service-account = "centaur@broad-dsde-cromwell-dev.iam.gserviceaccount.com"
        filesystems.http {}
        name-for-call-caching-purposes = "Papi"
      }
    }
    # Same as Papiv2 but with no Docker Hub configuration so access to private Docker Hub images will
    # require correct handling of workflow options.
    Papiv2NoDockerHubConfig {
      actor-factory = "cromwell.backend.google.pipelines.v2alpha1.PipelinesApiLifecycleActorFactory"
      config {
        include "papi_provider_config.inc.conf"
        # This SA does not have permission to bill this project when accessing RP buckets.
        # This is on purpose so that we can assert the failure (see requester_pays_localization_negative)
        genomics.compute-service-account = "centaur@broad-dsde-cromwell-dev.iam.gserviceaccount.com"
        filesystems.http {}
      }
    }
    Papiv2RequesterPays {
      actor-factory = "cromwell.backend.google.pipelines.v2alpha1.PipelinesApiLifecycleActorFactory"
      config {
        include "papi_provider_config.inc.conf"
        include "dockerhub_provider_config_v2.inc.conf"
        filesystems.gcs.auth = "requester_pays_service_account"
        genomics.compute-service-account = "requester-pays-authorized@broad-dsde-cromwell-dev.iam.gserviceaccount.com"
        filesystems.http {}
      }
    }
    Papi-Caching-No-Copy {
      actor-factory = "cromwell.backend.google.pipelines.v2alpha1.PipelinesApiLifecycleActorFactory"
      config {
        include "papi_provider_config.inc.conf"
        filesystems.gcs.caching.duplication-strategy = "reference"
        filesystems.http {}
      }
    }
  }
}
