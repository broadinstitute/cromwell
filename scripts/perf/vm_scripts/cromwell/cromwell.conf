include required(classpath("application.conf"))

akka.http.server.request-timeout = 600 seconds

google {

  application-name = "cromwell"

  auths = [
    {
      name = "application-default"
      scheme = "application_default"
    }
    {
      name = "user-service-account"
      scheme = "user_service_account"
    }
  ]
}

engine {
  filesystems {
    gcs {
      auth = "application-default"
      project = ${?CROMWELL_PROJECT}
    }
  }
}

call-caching {
  # Allows re-use of existing results for jobs you've already run
  # (default: false)
  enabled = true

  # Whether to invalidate a cache result forever if we cannot reuse them. Disable this if you expect some cache copies
  # to fail for external reasons which should not invalidate the cache (e.g. auth differences between users):
  # (default: true)
  invalidate-bad-cache-results = false
}

system.io.number-of-requests = 10240611

backend {
  default = "Papi"
  enabled = ["Papi"]
  providers {
    Papi {
      actor-factory = "cromwell.backend.google.pipelines.v1alpha2.PipelinesApiLifecycleActorFactory"
      config {
        project = ${?CROMWELL_PROJECT}
        root = ${?CROMWELL_EXECUTION_ROOT}
        maximum-polling-interval = 600
        concurrent-job-limit = 1000

        genomics {
          auth = "application-default"
          endpoint-url = "https://genomics.googleapis.com/"
        }

        filesystems {
          gcs {
            auth = "application-default"
            project = ${?CROMWELL_PROJECT}
          }
        }
      }
    }
  }
}

services {
  Instrumentation {
    # StatsD - Send metrics to a StatsD server over UDP
    class = "cromwell.services.instrumentation.impl.statsd.StatsDInstrumentationServiceActor"
    config.statsd {
      hostname = statsd-proxy
      port = 9125
      prefix = ${?CROMWELL_STATSD_PREFIX} # can be used to prefix all metrics with an api key for example
      flush-rate = 5 seconds # rate at which aggregated metrics will be sent to statsd
    }
  }
}

database {
  db.url = "jdbc:mysql://cloudsql-db/cromwell?useSSL=true&rewriteBatchedStatements=true"
  db.user = ${?CLOUD_SQL_DB_USER}
  db.password = ${?CLOUD_SQL_DB_PASSWORD}
  db.driver = "com.mysql.jdbc.Driver"
  profile = "slick.jdbc.MySQLProfile$"
}
