/*
 * Cromwell Server REST API
 * Describes the REST API provided by a Cromwell server
 *
 * The version of the OpenAPI document: 30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cromwell.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import cromwell.client.model.DescriptorTypeAndVersion;
import cromwell.client.model.ToolInputParameter;
import cromwell.client.model.ToolOutputParameter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import cromwell.client.JSON;

/**
 * WorkflowDescription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-27T17:59:53.222573Z[Etc/UTC]")
public class WorkflowDescription {
  public static final String SERIALIZED_NAME_VALID = "valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  private Boolean valid;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<String> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALID_WORKFLOW = "validWorkflow";
  @SerializedName(SERIALIZED_NAME_VALID_WORKFLOW)
  private Boolean validWorkflow;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_INPUTS = "inputs";
  @SerializedName(SERIALIZED_NAME_INPUTS)
  private List<ToolInputParameter> inputs = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTPUTS = "outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private List<ToolOutputParameter> outputs = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBMITTED_DESCRIPTOR_TYPE = "submittedDescriptorType";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_DESCRIPTOR_TYPE)
  private DescriptorTypeAndVersion submittedDescriptorType;

  public static final String SERIALIZED_NAME_IS_RUNNABLE_WORKFLOW = "isRunnableWorkflow";
  @SerializedName(SERIALIZED_NAME_IS_RUNNABLE_WORKFLOW)
  private Boolean isRunnableWorkflow;

  public static final String SERIALIZED_NAME_IMPORTED_DESCRIPTOR_TYPES = "importedDescriptorTypes";
  @SerializedName(SERIALIZED_NAME_IMPORTED_DESCRIPTOR_TYPES)
  private List<String> importedDescriptorTypes = null;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private Object meta;

  public static final String SERIALIZED_NAME_PARAMETER_META = "parameterMeta";
  @SerializedName(SERIALIZED_NAME_PARAMETER_META)
  private Object parameterMeta;

  public WorkflowDescription() {
  }

  public WorkflowDescription valid(Boolean valid) {
    
    this.valid = valid;
    return this;
  }

   /**
   * Indicates that the workflow is valid and that the inputs, if provided, are compatible with the workflow.
   * @return valid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates that the workflow is valid and that the inputs, if provided, are compatible with the workflow.")

  public Boolean getValid() {
    return valid;
  }


  public void setValid(Boolean valid) {
    this.valid = valid;
  }


  public WorkflowDescription errors(List<String> errors) {
    
    this.errors = errors;
    return this;
  }

  public WorkflowDescription addErrorsItem(String errorsItem) {
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * The set of validation failure messages
   * @return errors
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[The 'errors' field will be filled if 'valid' is false, We might also provide warnings to a 'valid' workflow here, Otherwise, 'errors' will be the empty array]", required = true, value = "The set of validation failure messages")

  public List<String> getErrors() {
    return errors;
  }


  public void setErrors(List<String> errors) {
    this.errors = errors;
  }


  public WorkflowDescription validWorkflow(Boolean validWorkflow) {
    
    this.validWorkflow = validWorkflow;
    return this;
  }

   /**
   * Indicates whether the workflow file is valid by itself. If inputs are provided, they are not considered when calculating this field; if inputs are not provided, the value is identical to &#x60;valid&#x60;.
   * @return validWorkflow
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the workflow file is valid by itself. If inputs are provided, they are not considered when calculating this field; if inputs are not provided, the value is identical to `valid`.")

  public Boolean getValidWorkflow() {
    return validWorkflow;
  }


  public void setValidWorkflow(Boolean validWorkflow) {
    this.validWorkflow = validWorkflow;
  }


  public WorkflowDescription name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * For a source file with one workflow and zero or more tasks, the name of the workflow. For a single task, the name of the task. For a source file with multiple tasks but no workflows, the empty string.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "For a source file with one workflow and zero or more tasks, the name of the workflow. For a single task, the name of the task. For a source file with multiple tasks but no workflows, the empty string.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public WorkflowDescription inputs(List<ToolInputParameter> inputs) {
    
    this.inputs = inputs;
    return this;
  }

  public WorkflowDescription addInputsItem(ToolInputParameter inputsItem) {
    this.inputs.add(inputsItem);
    return this;
  }

   /**
   * A list of inputs for this tool
   * @return inputs
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[{name=my_wf.string_input, valueType={typeName=String}, optional=false, typeDisplayName=String}, {name=my_wf.array_input, valueType={typeName=Array, arrayType={typeName=String}}, optional=false, typeDisplayName=Array[String]}, {name=my_wf.optional_input, valueType={typeName=Optional, optionalType={typeName=String}}, optional=true, default=hello, typeDisplayName=String?}, {name=my_wf.map_input, valueType={typeName=Map, mapType={keyType={typeName=String}, valueType={typeName=Int}}}, optional=false, typeDisplayName=Map[String, Int]}, {name=my_wf.object_input, valueType={typeName=Object, objectFieldTypes=[{fieldName=int_field, fieldType={typeName=Int}}, {fieldName=int_array_field, fieldType={typeName=Array, arrayType={typeName=Int}}}]}, optional=false, typeDisplayName=Object}, {name=my_wf.int_string_pair_input, valueType={typeName=Pair, pairTypes=[{leftType=[{typeName=Int}]}, {rightType=[{typeName=String}]}]}, optional=false, typeDisplayName=Pair[Int, String]}]", required = true, value = "A list of inputs for this tool")

  public List<ToolInputParameter> getInputs() {
    return inputs;
  }


  public void setInputs(List<ToolInputParameter> inputs) {
    this.inputs = inputs;
  }


  public WorkflowDescription outputs(List<ToolOutputParameter> outputs) {
    
    this.outputs = outputs;
    return this;
  }

  public WorkflowDescription addOutputsItem(ToolOutputParameter outputsItem) {
    this.outputs.add(outputsItem);
    return this;
  }

   /**
   * A list of outputs for this tool
   * @return outputs
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[{name=my_wf.string_output, valueType={typeName=String}, typeDisplayName=String}, {name=my_wf.array_output, valueType={typeName=Array, arrayType={typeName=String}}, typeDisplayName=Array[String]}, {name=my_wf.map_output, valueType={typeName=Map, mapType={keyType={typeName=String}, valueType={typeName=Int}}}, typeDisplayName=Map[String, Int]}, {name=my_wf.object_output, valueType={typeName=Object, objectFieldTypes=[{fieldName=int_field, fieldType={typeName=Int}}, {fieldName=int_array_field, fieldType={typeName=Array, arrayType={typeName=Int}}}]}, typeDisplayName=Object}, {name=my_wf.int_string_pair_output, valueType={typeName=Pair, tupleTypes=[{typeName=Int}, {typeName=String}]}, typeDisplayName=Pair[Int, String]}]", required = true, value = "A list of outputs for this tool")

  public List<ToolOutputParameter> getOutputs() {
    return outputs;
  }


  public void setOutputs(List<ToolOutputParameter> outputs) {
    this.outputs = outputs;
  }


  public WorkflowDescription submittedDescriptorType(DescriptorTypeAndVersion submittedDescriptorType) {
    
    this.submittedDescriptorType = submittedDescriptorType;
    return this;
  }

   /**
   * Get submittedDescriptorType
   * @return submittedDescriptorType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public DescriptorTypeAndVersion getSubmittedDescriptorType() {
    return submittedDescriptorType;
  }


  public void setSubmittedDescriptorType(DescriptorTypeAndVersion submittedDescriptorType) {
    this.submittedDescriptorType = submittedDescriptorType;
  }


  public WorkflowDescription isRunnableWorkflow(Boolean isRunnableWorkflow) {
    
    this.isRunnableWorkflow = isRunnableWorkflow;
    return this;
  }

   /**
   * Indicates whether this file can be run on its own (e.g. a WDL workflow)
   * @return isRunnableWorkflow
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether this file can be run on its own (e.g. a WDL workflow)")

  public Boolean getIsRunnableWorkflow() {
    return isRunnableWorkflow;
  }


  public void setIsRunnableWorkflow(Boolean isRunnableWorkflow) {
    this.isRunnableWorkflow = isRunnableWorkflow;
  }


  public WorkflowDescription importedDescriptorTypes(List<String> importedDescriptorTypes) {
    
    this.importedDescriptorTypes = importedDescriptorTypes;
    return this;
  }

  public WorkflowDescription addImportedDescriptorTypesItem(String importedDescriptorTypesItem) {
    if (this.importedDescriptorTypes == null) {
      this.importedDescriptorTypes = new ArrayList<>();
    }
    this.importedDescriptorTypes.add(importedDescriptorTypesItem);
    return this;
  }

   /**
   * Get importedDescriptorTypes
   * @return importedDescriptorTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getImportedDescriptorTypes() {
    return importedDescriptorTypes;
  }


  public void setImportedDescriptorTypes(List<String> importedDescriptorTypes) {
    this.importedDescriptorTypes = importedDescriptorTypes;
  }


  public WorkflowDescription meta(Object meta) {
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getMeta() {
    return meta;
  }


  public void setMeta(Object meta) {
    this.meta = meta;
  }


  public WorkflowDescription parameterMeta(Object parameterMeta) {
    
    this.parameterMeta = parameterMeta;
    return this;
  }

   /**
   * Get parameterMeta
   * @return parameterMeta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getParameterMeta() {
    return parameterMeta;
  }


  public void setParameterMeta(Object parameterMeta) {
    this.parameterMeta = parameterMeta;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public WorkflowDescription putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowDescription workflowDescription = (WorkflowDescription) o;
    return Objects.equals(this.valid, workflowDescription.valid) &&
        Objects.equals(this.errors, workflowDescription.errors) &&
        Objects.equals(this.validWorkflow, workflowDescription.validWorkflow) &&
        Objects.equals(this.name, workflowDescription.name) &&
        Objects.equals(this.inputs, workflowDescription.inputs) &&
        Objects.equals(this.outputs, workflowDescription.outputs) &&
        Objects.equals(this.submittedDescriptorType, workflowDescription.submittedDescriptorType) &&
        Objects.equals(this.isRunnableWorkflow, workflowDescription.isRunnableWorkflow) &&
        Objects.equals(this.importedDescriptorTypes, workflowDescription.importedDescriptorTypes) &&
        Objects.equals(this.meta, workflowDescription.meta) &&
        Objects.equals(this.parameterMeta, workflowDescription.parameterMeta)&&
        Objects.equals(this.additionalProperties, workflowDescription.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(valid, errors, validWorkflow, name, inputs, outputs, submittedDescriptorType, isRunnableWorkflow, importedDescriptorTypes, meta, parameterMeta, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowDescription {\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    validWorkflow: ").append(toIndentedString(validWorkflow)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    submittedDescriptorType: ").append(toIndentedString(submittedDescriptorType)).append("\n");
    sb.append("    isRunnableWorkflow: ").append(toIndentedString(isRunnableWorkflow)).append("\n");
    sb.append("    importedDescriptorTypes: ").append(toIndentedString(importedDescriptorTypes)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    parameterMeta: ").append(toIndentedString(parameterMeta)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("valid");
    openapiFields.add("errors");
    openapiFields.add("validWorkflow");
    openapiFields.add("name");
    openapiFields.add("inputs");
    openapiFields.add("outputs");
    openapiFields.add("submittedDescriptorType");
    openapiFields.add("isRunnableWorkflow");
    openapiFields.add("importedDescriptorTypes");
    openapiFields.add("meta");
    openapiFields.add("parameterMeta");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("valid");
    openapiRequiredFields.add("errors");
    openapiRequiredFields.add("validWorkflow");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("inputs");
    openapiRequiredFields.add("outputs");
    openapiRequiredFields.add("submittedDescriptorType");
    openapiRequiredFields.add("isRunnableWorkflow");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WorkflowDescription
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (WorkflowDescription.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowDescription is not found in the empty JSON string", WorkflowDescription.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkflowDescription.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if ((jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) && !jsonObj.get("errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      JsonArray jsonArrayinputs = jsonObj.getAsJsonArray("inputs");
      if (jsonArrayinputs != null) {
        // ensure the json data is an array
        if (!jsonObj.get("inputs").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `inputs` to be an array in the JSON string but got `%s`", jsonObj.get("inputs").toString()));
        }

        // validate the optional field `inputs` (array)
        for (int i = 0; i < jsonArrayinputs.size(); i++) {
          ToolInputParameter.validateJsonObject(jsonArrayinputs.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayoutputs = jsonObj.getAsJsonArray("outputs");
      if (jsonArrayoutputs != null) {
        // ensure the json data is an array
        if (!jsonObj.get("outputs").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `outputs` to be an array in the JSON string but got `%s`", jsonObj.get("outputs").toString()));
        }

        // validate the optional field `outputs` (array)
        for (int i = 0; i < jsonArrayoutputs.size(); i++) {
          ToolOutputParameter.validateJsonObject(jsonArrayoutputs.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `submittedDescriptorType`
      if (jsonObj.get("submittedDescriptorType") != null && !jsonObj.get("submittedDescriptorType").isJsonNull()) {
        DescriptorTypeAndVersion.validateJsonObject(jsonObj.getAsJsonObject("submittedDescriptorType"));
      }
      // ensure the json data is an array
      if ((jsonObj.get("importedDescriptorTypes") != null && !jsonObj.get("importedDescriptorTypes").isJsonNull()) && !jsonObj.get("importedDescriptorTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `importedDescriptorTypes` to be an array in the JSON string but got `%s`", jsonObj.get("importedDescriptorTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowDescription>() {
           @Override
           public void write(JsonWriter out, WorkflowDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowDescription read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             WorkflowDescription instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorkflowDescription given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorkflowDescription
  * @throws IOException if the JSON string is invalid with respect to WorkflowDescription
  */
  public static WorkflowDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowDescription.class);
  }

 /**
  * Convert an instance of WorkflowDescription to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

