/*
 * Cromwell Server REST API
 * Describes the REST API provided by a Cromwell server
 *
 * The version of the OpenAPI document: 30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cromwell.client.api;

import cromwell.client.ApiCallback;
import cromwell.client.ApiClient;
import cromwell.client.ApiException;
import cromwell.client.ApiResponse;
import cromwell.client.Configuration;
import cromwell.client.Pair;
import cromwell.client.ProgressRequestBody;
import cromwell.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cromwell.client.model.BackendResponse;
import cromwell.client.model.LabelsResponse;
import java.time.OffsetDateTime;
import cromwell.client.model.WorkflowIdAndStatus;
import cromwell.client.model.WorkflowMetadataResponse;
import cromwell.client.model.WorkflowQueryParameter;
import cromwell.client.model.WorkflowQueryResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkflowsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkflowsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkflowsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for abort
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Workflow in terminal status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abortCall(String version, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workflows/{version}/{id}/abort"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abortValidateBeforeCall(String version, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling abort(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling abort(Async)");
        }
        

        okhttp3.Call localVarCall = abortCall(version, id, _callback);
        return localVarCall;

    }

    /**
     * Abort a running workflow
     * Request Cromwell to abort a running workflow. For instance this might be necessary in cases where you have submitted a workflow with incorrect inputs or no longer need the results. Cromwell will schedule a halt of all currently running jobs from this workflow.
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @return WorkflowIdAndStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Workflow in terminal status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowIdAndStatus abort(String version, String id) throws ApiException {
        ApiResponse<WorkflowIdAndStatus> localVarResp = abortWithHttpInfo(version, id);
        return localVarResp.getData();
    }

    /**
     * Abort a running workflow
     * Request Cromwell to abort a running workflow. For instance this might be necessary in cases where you have submitted a workflow with incorrect inputs or no longer need the results. Cromwell will schedule a halt of all currently running jobs from this workflow.
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @return ApiResponse&lt;WorkflowIdAndStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Workflow in terminal status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowIdAndStatus> abortWithHttpInfo(String version, String id) throws ApiException {
        okhttp3.Call localVarCall = abortValidateBeforeCall(version, id, null);
        Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Abort a running workflow (asynchronously)
     * Request Cromwell to abort a running workflow. For instance this might be necessary in cases where you have submitted a workflow with incorrect inputs or no longer need the results. Cromwell will schedule a halt of all currently running jobs from this workflow.
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Workflow in terminal status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call abortAsync(String version, String id, final ApiCallback<WorkflowIdAndStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = abortValidateBeforeCall(version, id, _callback);
        Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for backends
     * @param version Cromwell API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backendsCall(String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workflows/{version}/backends"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backendsValidateBeforeCall(String version, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling backends(Async)");
        }
        

        okhttp3.Call localVarCall = backendsCall(version, _callback);
        return localVarCall;

    }

    /**
     * List the supported backends
     * Returns the backends supported by this Cromwell server, as well as the default backend.
     * @param version Cromwell API Version (required)
     * @return BackendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
     </table>
     */
    public BackendResponse backends(String version) throws ApiException {
        ApiResponse<BackendResponse> localVarResp = backendsWithHttpInfo(version);
        return localVarResp.getData();
    }

    /**
     * List the supported backends
     * Returns the backends supported by this Cromwell server, as well as the default backend.
     * @param version Cromwell API Version (required)
     * @return ApiResponse&lt;BackendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackendResponse> backendsWithHttpInfo(String version) throws ApiException {
        okhttp3.Call localVarCall = backendsValidateBeforeCall(version, null);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the supported backends (asynchronously)
     * Returns the backends supported by this Cromwell server, as well as the default backend.
     * @param version Cromwell API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backendsAsync(String version, final ApiCallback<BackendResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = backendsValidateBeforeCall(version, _callback);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callCacheDiff
     * @param version Cromwell API Version (required)
     * @param workflowA Workflow Id of the first workflow (required)
     * @param callA Fully qualified name, including workflow name, of the first call. (required)
     * @param workflowB Workflow Id of the second workflow (required)
     * @param callB Fully qualified name, including workflow name, of the second call (required)
     * @param indexA Shard index for the first call for cases where the requested call was part of a scatter. (optional)
     * @param indexB Shard index for the second call for cases where the requested call was part of a scatter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No matching cache entry. Cromwell versions prior to 28 will not have recorded information necessary for this endpoint and thus will also appear to not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callCacheDiffCall(String version, String workflowA, String callA, String workflowB, String callB, Integer indexA, Integer indexB, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workflows/{version}/callcaching/diff"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workflowA != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowA", workflowA));
        }

        if (callA != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callA", callA));
        }

        if (indexA != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("indexA", indexA));
        }

        if (workflowB != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowB", workflowB));
        }

        if (callB != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callB", callB));
        }

        if (indexB != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("indexB", indexB));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callCacheDiffValidateBeforeCall(String version, String workflowA, String callA, String workflowB, String callB, Integer indexA, Integer indexB, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling callCacheDiff(Async)");
        }
        
        // verify the required parameter 'workflowA' is set
        if (workflowA == null) {
            throw new ApiException("Missing the required parameter 'workflowA' when calling callCacheDiff(Async)");
        }
        
        // verify the required parameter 'callA' is set
        if (callA == null) {
            throw new ApiException("Missing the required parameter 'callA' when calling callCacheDiff(Async)");
        }
        
        // verify the required parameter 'workflowB' is set
        if (workflowB == null) {
            throw new ApiException("Missing the required parameter 'workflowB' when calling callCacheDiff(Async)");
        }
        
        // verify the required parameter 'callB' is set
        if (callB == null) {
            throw new ApiException("Missing the required parameter 'callB' when calling callCacheDiff(Async)");
        }
        

        okhttp3.Call localVarCall = callCacheDiffCall(version, workflowA, callA, workflowB, callB, indexA, indexB, _callback);
        return localVarCall;

    }

    /**
     * Explain hashing differences for 2 calls
     * This endpoint returns the hash differences between 2 completed (successfully or not) calls.
     * @param version Cromwell API Version (required)
     * @param workflowA Workflow Id of the first workflow (required)
     * @param callA Fully qualified name, including workflow name, of the first call. (required)
     * @param workflowB Workflow Id of the second workflow (required)
     * @param callB Fully qualified name, including workflow name, of the second call (required)
     * @param indexA Shard index for the first call for cases where the requested call was part of a scatter. (optional)
     * @param indexB Shard index for the second call for cases where the requested call was part of a scatter. (optional)
     * @return WorkflowIdAndStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No matching cache entry. Cromwell versions prior to 28 will not have recorded information necessary for this endpoint and thus will also appear to not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowIdAndStatus callCacheDiff(String version, String workflowA, String callA, String workflowB, String callB, Integer indexA, Integer indexB) throws ApiException {
        ApiResponse<WorkflowIdAndStatus> localVarResp = callCacheDiffWithHttpInfo(version, workflowA, callA, workflowB, callB, indexA, indexB);
        return localVarResp.getData();
    }

    /**
     * Explain hashing differences for 2 calls
     * This endpoint returns the hash differences between 2 completed (successfully or not) calls.
     * @param version Cromwell API Version (required)
     * @param workflowA Workflow Id of the first workflow (required)
     * @param callA Fully qualified name, including workflow name, of the first call. (required)
     * @param workflowB Workflow Id of the second workflow (required)
     * @param callB Fully qualified name, including workflow name, of the second call (required)
     * @param indexA Shard index for the first call for cases where the requested call was part of a scatter. (optional)
     * @param indexB Shard index for the second call for cases where the requested call was part of a scatter. (optional)
     * @return ApiResponse&lt;WorkflowIdAndStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No matching cache entry. Cromwell versions prior to 28 will not have recorded information necessary for this endpoint and thus will also appear to not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowIdAndStatus> callCacheDiffWithHttpInfo(String version, String workflowA, String callA, String workflowB, String callB, Integer indexA, Integer indexB) throws ApiException {
        okhttp3.Call localVarCall = callCacheDiffValidateBeforeCall(version, workflowA, callA, workflowB, callB, indexA, indexB, null);
        Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Explain hashing differences for 2 calls (asynchronously)
     * This endpoint returns the hash differences between 2 completed (successfully or not) calls.
     * @param version Cromwell API Version (required)
     * @param workflowA Workflow Id of the first workflow (required)
     * @param callA Fully qualified name, including workflow name, of the first call. (required)
     * @param workflowB Workflow Id of the second workflow (required)
     * @param callB Fully qualified name, including workflow name, of the second call (required)
     * @param indexA Shard index for the first call for cases where the requested call was part of a scatter. (optional)
     * @param indexB Shard index for the second call for cases where the requested call was part of a scatter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No matching cache entry. Cromwell versions prior to 28 will not have recorded information necessary for this endpoint and thus will also appear to not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callCacheDiffAsync(String version, String workflowA, String callA, String workflowB, String callB, Integer indexA, Integer indexB, final ApiCallback<WorkflowIdAndStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = callCacheDiffValidateBeforeCall(version, workflowA, callA, workflowB, callB, indexA, indexB, _callback);
        Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for labels
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call labelsCall(String version, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workflows/{version}/{id}/labels"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call labelsValidateBeforeCall(String version, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling labels(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling labels(Async)");
        }
        

        okhttp3.Call localVarCall = labelsCall(version, id, _callback);
        return localVarCall;

    }

    /**
     * Retrieves the current labels for a workflow
     * 
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @return LabelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public LabelsResponse labels(String version, String id) throws ApiException {
        ApiResponse<LabelsResponse> localVarResp = labelsWithHttpInfo(version, id);
        return localVarResp.getData();
    }

    /**
     * Retrieves the current labels for a workflow
     * 
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @return ApiResponse&lt;LabelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelsResponse> labelsWithHttpInfo(String version, String id) throws ApiException {
        okhttp3.Call localVarCall = labelsValidateBeforeCall(version, id, null);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the current labels for a workflow (asynchronously)
     * 
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call labelsAsync(String version, String id, final ApiCallback<LabelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = labelsValidateBeforeCall(version, id, _callback);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logs
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsCall(String version, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workflows/{version}/{id}/logs"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsValidateBeforeCall(String version, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling logs(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling logs(Async)");
        }
        

        okhttp3.Call localVarCall = logsCall(version, id, _callback);
        return localVarCall;

    }

    /**
     * Get the logs for a workflow
     * Returns paths to the standard out and standard error files that were generated during the execution of all calls in a workflow. A call has one or more standard out and standard error logs, depending on if the call was scattered or not. In the latter case, one log is provided for each instance of the call that has been run.
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @return WorkflowIdAndStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowIdAndStatus logs(String version, String id) throws ApiException {
        ApiResponse<WorkflowIdAndStatus> localVarResp = logsWithHttpInfo(version, id);
        return localVarResp.getData();
    }

    /**
     * Get the logs for a workflow
     * Returns paths to the standard out and standard error files that were generated during the execution of all calls in a workflow. A call has one or more standard out and standard error logs, depending on if the call was scattered or not. In the latter case, one log is provided for each instance of the call that has been run.
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @return ApiResponse&lt;WorkflowIdAndStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowIdAndStatus> logsWithHttpInfo(String version, String id) throws ApiException {
        okhttp3.Call localVarCall = logsValidateBeforeCall(version, id, null);
        Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the logs for a workflow (asynchronously)
     * Returns paths to the standard out and standard error files that were generated during the execution of all calls in a workflow. A call has one or more standard out and standard error logs, depending on if the call was scattered or not. In the latter case, one log is provided for each instance of the call that has been run.
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAsync(String version, String id, final ApiCallback<WorkflowIdAndStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsValidateBeforeCall(version, id, _callback);
        Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadata
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @param includeKey When specified, filters metadata to only return fields with names which begins with this value. This key is used relative to the root of the response *and* relative to each call&#39;s metadata fields.  (optional)
     * @param excludeKey When specified, filters metadata to not return any field with a name which begins with this value. This key is used relative to the root of the response *and* relative to each call&#39;s metadata fields. Use &#39;calls&#39; to filter out all call level metadata.  (optional)
     * @param expandSubWorkflows When true, metadata for sub workflows will be fetched and inserted automatically in the metadata response.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataCall(String version, String id, List<String> includeKey, List<String> excludeKey, Boolean expandSubWorkflows, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workflows/{version}/{id}/metadata"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeKey != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "includeKey", includeKey));
        }

        if (excludeKey != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "excludeKey", excludeKey));
        }

        if (expandSubWorkflows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expandSubWorkflows", expandSubWorkflows));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataValidateBeforeCall(String version, String id, List<String> includeKey, List<String> excludeKey, Boolean expandSubWorkflows, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling metadata(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling metadata(Async)");
        }
        

        okhttp3.Call localVarCall = metadataCall(version, id, includeKey, excludeKey, expandSubWorkflows, _callback);
        return localVarCall;

    }

    /**
     * Get workflow and call-level metadata for a specified workflow
     * 
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @param includeKey When specified, filters metadata to only return fields with names which begins with this value. This key is used relative to the root of the response *and* relative to each call&#39;s metadata fields.  (optional)
     * @param excludeKey When specified, filters metadata to not return any field with a name which begins with this value. This key is used relative to the root of the response *and* relative to each call&#39;s metadata fields. Use &#39;calls&#39; to filter out all call level metadata.  (optional)
     * @param expandSubWorkflows When true, metadata for sub workflows will be fetched and inserted automatically in the metadata response.  (optional)
     * @return WorkflowMetadataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowMetadataResponse metadata(String version, String id, List<String> includeKey, List<String> excludeKey, Boolean expandSubWorkflows) throws ApiException {
        ApiResponse<WorkflowMetadataResponse> localVarResp = metadataWithHttpInfo(version, id, includeKey, excludeKey, expandSubWorkflows);
        return localVarResp.getData();
    }

    /**
     * Get workflow and call-level metadata for a specified workflow
     * 
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @param includeKey When specified, filters metadata to only return fields with names which begins with this value. This key is used relative to the root of the response *and* relative to each call&#39;s metadata fields.  (optional)
     * @param excludeKey When specified, filters metadata to not return any field with a name which begins with this value. This key is used relative to the root of the response *and* relative to each call&#39;s metadata fields. Use &#39;calls&#39; to filter out all call level metadata.  (optional)
     * @param expandSubWorkflows When true, metadata for sub workflows will be fetched and inserted automatically in the metadata response.  (optional)
     * @return ApiResponse&lt;WorkflowMetadataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowMetadataResponse> metadataWithHttpInfo(String version, String id, List<String> includeKey, List<String> excludeKey, Boolean expandSubWorkflows) throws ApiException {
        okhttp3.Call localVarCall = metadataValidateBeforeCall(version, id, includeKey, excludeKey, expandSubWorkflows, null);
        Type localVarReturnType = new TypeToken<WorkflowMetadataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get workflow and call-level metadata for a specified workflow (asynchronously)
     * 
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @param includeKey When specified, filters metadata to only return fields with names which begins with this value. This key is used relative to the root of the response *and* relative to each call&#39;s metadata fields.  (optional)
     * @param excludeKey When specified, filters metadata to not return any field with a name which begins with this value. This key is used relative to the root of the response *and* relative to each call&#39;s metadata fields. Use &#39;calls&#39; to filter out all call level metadata.  (optional)
     * @param expandSubWorkflows When true, metadata for sub workflows will be fetched and inserted automatically in the metadata response.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataAsync(String version, String id, List<String> includeKey, List<String> excludeKey, Boolean expandSubWorkflows, final ApiCallback<WorkflowMetadataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataValidateBeforeCall(version, id, includeKey, excludeKey, expandSubWorkflows, _callback);
        Type localVarReturnType = new TypeToken<WorkflowMetadataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for outputs
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outputsCall(String version, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workflows/{version}/{id}/outputs"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call outputsValidateBeforeCall(String version, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling outputs(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling outputs(Async)");
        }
        

        okhttp3.Call localVarCall = outputsCall(version, id, _callback);
        return localVarCall;

    }

    /**
     * Get the outputs for a workflow
     * Retrieve the outputs for the specified workflow. Cromwell will return any outputs which currently exist even if a workflow has not successfully completed.
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @return WorkflowIdAndStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowIdAndStatus outputs(String version, String id) throws ApiException {
        ApiResponse<WorkflowIdAndStatus> localVarResp = outputsWithHttpInfo(version, id);
        return localVarResp.getData();
    }

    /**
     * Get the outputs for a workflow
     * Retrieve the outputs for the specified workflow. Cromwell will return any outputs which currently exist even if a workflow has not successfully completed.
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @return ApiResponse&lt;WorkflowIdAndStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowIdAndStatus> outputsWithHttpInfo(String version, String id) throws ApiException {
        okhttp3.Call localVarCall = outputsValidateBeforeCall(version, id, null);
        Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the outputs for a workflow (asynchronously)
     * Retrieve the outputs for the specified workflow. Cromwell will return any outputs which currently exist even if a workflow has not successfully completed.
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outputsAsync(String version, String id, final ApiCallback<WorkflowIdAndStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = outputsValidateBeforeCall(version, id, _callback);
        Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryGet
     * @param version Cromwell API Version (required)
     * @param submission Returns only workflows with an equal or later submission time. Can be specified at most once. If both submission time and start date are specified, submission time should be before or equal to start date.  (optional)
     * @param start Returns only workflows with an equal or later start datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date.  (optional)
     * @param end Returns only workflows with an equal or earlier end datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date.  (optional)
     * @param status Returns only workflows with the specified status.  If specified multiple times, returns workflows in any of the specified statuses.  (optional)
     * @param name Returns only workflows with the specified name.  If specified multiple times, returns workflows with any of the specified names.  (optional)
     * @param id Returns only workflows with the specified workflow id.  If specified multiple times, returns workflows with any of the specified workflow ids.  (optional)
     * @param label Returns workflows with the specified label keys.  If specified multiple times, returns workflows with all of the specified label keys. Specify the label key and label value pair as separated with \&quot;label-key:label-value\&quot;  (optional)
     * @param labelor Returns workflows with the specified label keys.  If specified multiple times, returns workflows with any of the specified label keys. Specify the label key and label value pair as separated with \&quot;label-key:label-value\&quot;  (optional)
     * @param excludeLabelAnd Excludes workflows with the specified label.  If specified multiple times, excludes workflows with all of the specified label keys. Specify the label key and label value pair as separated with \&quot;label-key:label-value\&quot;  (optional)
     * @param excludeLabelOr Excludes workflows with the specified label.  If specified multiple times, excludes workflows with any of the specified label keys. Specify the label key and label value pair as separated with \&quot;label-key:label-value\&quot;  (optional)
     * @param additionalQueryResultFields Currently only &#39;labels&#39; is a valid value here. Use it to include a list of labels with each result.  (optional)
     * @param includeSubworkflows Include subworkflows in results. By default, it is taken as true. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Workflow in terminal status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryGetCall(String version, OffsetDateTime submission, OffsetDateTime start, OffsetDateTime end, List<String> status, List<String> name, List<String> id, List<String> label, List<String> labelor, List<String> excludeLabelAnd, List<String> excludeLabelOr, List<String> additionalQueryResultFields, Boolean includeSubworkflows, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workflows/{version}/query"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (submission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("submission", submission));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status", status));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (label != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "label", label));
        }

        if (labelor != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "labelor", labelor));
        }

        if (excludeLabelAnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "excludeLabelAnd", excludeLabelAnd));
        }

        if (excludeLabelOr != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "excludeLabelOr", excludeLabelOr));
        }

        if (additionalQueryResultFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "additionalQueryResultFields", additionalQueryResultFields));
        }

        if (includeSubworkflows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSubworkflows", includeSubworkflows));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryGetValidateBeforeCall(String version, OffsetDateTime submission, OffsetDateTime start, OffsetDateTime end, List<String> status, List<String> name, List<String> id, List<String> label, List<String> labelor, List<String> excludeLabelAnd, List<String> excludeLabelOr, List<String> additionalQueryResultFields, Boolean includeSubworkflows, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling queryGet(Async)");
        }
        

        okhttp3.Call localVarCall = queryGetCall(version, submission, start, end, status, name, id, label, labelor, excludeLabelAnd, excludeLabelOr, additionalQueryResultFields, includeSubworkflows, _callback);
        return localVarCall;

    }

    /**
     * Get workflows matching some criteria
     * Query for workflows which match various criteria. When a combination of criteria are applied the endpoint will return
     * @param version Cromwell API Version (required)
     * @param submission Returns only workflows with an equal or later submission time. Can be specified at most once. If both submission time and start date are specified, submission time should be before or equal to start date.  (optional)
     * @param start Returns only workflows with an equal or later start datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date.  (optional)
     * @param end Returns only workflows with an equal or earlier end datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date.  (optional)
     * @param status Returns only workflows with the specified status.  If specified multiple times, returns workflows in any of the specified statuses.  (optional)
     * @param name Returns only workflows with the specified name.  If specified multiple times, returns workflows with any of the specified names.  (optional)
     * @param id Returns only workflows with the specified workflow id.  If specified multiple times, returns workflows with any of the specified workflow ids.  (optional)
     * @param label Returns workflows with the specified label keys.  If specified multiple times, returns workflows with all of the specified label keys. Specify the label key and label value pair as separated with \&quot;label-key:label-value\&quot;  (optional)
     * @param labelor Returns workflows with the specified label keys.  If specified multiple times, returns workflows with any of the specified label keys. Specify the label key and label value pair as separated with \&quot;label-key:label-value\&quot;  (optional)
     * @param excludeLabelAnd Excludes workflows with the specified label.  If specified multiple times, excludes workflows with all of the specified label keys. Specify the label key and label value pair as separated with \&quot;label-key:label-value\&quot;  (optional)
     * @param excludeLabelOr Excludes workflows with the specified label.  If specified multiple times, excludes workflows with any of the specified label keys. Specify the label key and label value pair as separated with \&quot;label-key:label-value\&quot;  (optional)
     * @param additionalQueryResultFields Currently only &#39;labels&#39; is a valid value here. Use it to include a list of labels with each result.  (optional)
     * @param includeSubworkflows Include subworkflows in results. By default, it is taken as true. (optional)
     * @return WorkflowQueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Workflow in terminal status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowQueryResponse queryGet(String version, OffsetDateTime submission, OffsetDateTime start, OffsetDateTime end, List<String> status, List<String> name, List<String> id, List<String> label, List<String> labelor, List<String> excludeLabelAnd, List<String> excludeLabelOr, List<String> additionalQueryResultFields, Boolean includeSubworkflows) throws ApiException {
        ApiResponse<WorkflowQueryResponse> localVarResp = queryGetWithHttpInfo(version, submission, start, end, status, name, id, label, labelor, excludeLabelAnd, excludeLabelOr, additionalQueryResultFields, includeSubworkflows);
        return localVarResp.getData();
    }

    /**
     * Get workflows matching some criteria
     * Query for workflows which match various criteria. When a combination of criteria are applied the endpoint will return
     * @param version Cromwell API Version (required)
     * @param submission Returns only workflows with an equal or later submission time. Can be specified at most once. If both submission time and start date are specified, submission time should be before or equal to start date.  (optional)
     * @param start Returns only workflows with an equal or later start datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date.  (optional)
     * @param end Returns only workflows with an equal or earlier end datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date.  (optional)
     * @param status Returns only workflows with the specified status.  If specified multiple times, returns workflows in any of the specified statuses.  (optional)
     * @param name Returns only workflows with the specified name.  If specified multiple times, returns workflows with any of the specified names.  (optional)
     * @param id Returns only workflows with the specified workflow id.  If specified multiple times, returns workflows with any of the specified workflow ids.  (optional)
     * @param label Returns workflows with the specified label keys.  If specified multiple times, returns workflows with all of the specified label keys. Specify the label key and label value pair as separated with \&quot;label-key:label-value\&quot;  (optional)
     * @param labelor Returns workflows with the specified label keys.  If specified multiple times, returns workflows with any of the specified label keys. Specify the label key and label value pair as separated with \&quot;label-key:label-value\&quot;  (optional)
     * @param excludeLabelAnd Excludes workflows with the specified label.  If specified multiple times, excludes workflows with all of the specified label keys. Specify the label key and label value pair as separated with \&quot;label-key:label-value\&quot;  (optional)
     * @param excludeLabelOr Excludes workflows with the specified label.  If specified multiple times, excludes workflows with any of the specified label keys. Specify the label key and label value pair as separated with \&quot;label-key:label-value\&quot;  (optional)
     * @param additionalQueryResultFields Currently only &#39;labels&#39; is a valid value here. Use it to include a list of labels with each result.  (optional)
     * @param includeSubworkflows Include subworkflows in results. By default, it is taken as true. (optional)
     * @return ApiResponse&lt;WorkflowQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Workflow in terminal status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowQueryResponse> queryGetWithHttpInfo(String version, OffsetDateTime submission, OffsetDateTime start, OffsetDateTime end, List<String> status, List<String> name, List<String> id, List<String> label, List<String> labelor, List<String> excludeLabelAnd, List<String> excludeLabelOr, List<String> additionalQueryResultFields, Boolean includeSubworkflows) throws ApiException {
        okhttp3.Call localVarCall = queryGetValidateBeforeCall(version, submission, start, end, status, name, id, label, labelor, excludeLabelAnd, excludeLabelOr, additionalQueryResultFields, includeSubworkflows, null);
        Type localVarReturnType = new TypeToken<WorkflowQueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get workflows matching some criteria (asynchronously)
     * Query for workflows which match various criteria. When a combination of criteria are applied the endpoint will return
     * @param version Cromwell API Version (required)
     * @param submission Returns only workflows with an equal or later submission time. Can be specified at most once. If both submission time and start date are specified, submission time should be before or equal to start date.  (optional)
     * @param start Returns only workflows with an equal or later start datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date.  (optional)
     * @param end Returns only workflows with an equal or earlier end datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date.  (optional)
     * @param status Returns only workflows with the specified status.  If specified multiple times, returns workflows in any of the specified statuses.  (optional)
     * @param name Returns only workflows with the specified name.  If specified multiple times, returns workflows with any of the specified names.  (optional)
     * @param id Returns only workflows with the specified workflow id.  If specified multiple times, returns workflows with any of the specified workflow ids.  (optional)
     * @param label Returns workflows with the specified label keys.  If specified multiple times, returns workflows with all of the specified label keys. Specify the label key and label value pair as separated with \&quot;label-key:label-value\&quot;  (optional)
     * @param labelor Returns workflows with the specified label keys.  If specified multiple times, returns workflows with any of the specified label keys. Specify the label key and label value pair as separated with \&quot;label-key:label-value\&quot;  (optional)
     * @param excludeLabelAnd Excludes workflows with the specified label.  If specified multiple times, excludes workflows with all of the specified label keys. Specify the label key and label value pair as separated with \&quot;label-key:label-value\&quot;  (optional)
     * @param excludeLabelOr Excludes workflows with the specified label.  If specified multiple times, excludes workflows with any of the specified label keys. Specify the label key and label value pair as separated with \&quot;label-key:label-value\&quot;  (optional)
     * @param additionalQueryResultFields Currently only &#39;labels&#39; is a valid value here. Use it to include a list of labels with each result.  (optional)
     * @param includeSubworkflows Include subworkflows in results. By default, it is taken as true. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Workflow in terminal status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryGetAsync(String version, OffsetDateTime submission, OffsetDateTime start, OffsetDateTime end, List<String> status, List<String> name, List<String> id, List<String> label, List<String> labelor, List<String> excludeLabelAnd, List<String> excludeLabelOr, List<String> additionalQueryResultFields, Boolean includeSubworkflows, final ApiCallback<WorkflowQueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryGetValidateBeforeCall(version, submission, start, end, status, name, id, label, labelor, excludeLabelAnd, excludeLabelOr, additionalQueryResultFields, includeSubworkflows, _callback);
        Type localVarReturnType = new TypeToken<WorkflowQueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryPost
     * @param version Cromwell API Version (required)
     * @param parameters Same query parameters as GET /query endpoint, submitted as a json list. Example: [{\&quot;status\&quot;:\&quot;Success\&quot;},{\&quot;status\&quot;:\&quot;Failed\&quot;}]  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryPostCall(String version, List<WorkflowQueryParameter> parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/api/workflows/{version}/query"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryPostValidateBeforeCall(String version, List<WorkflowQueryParameter> parameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling queryPost(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling queryPost(Async)");
        }
        

        okhttp3.Call localVarCall = queryPostCall(version, parameters, _callback);
        return localVarCall;

    }

    /**
     * Get workflows matching some criteria
     * Query workflows by start dates, end dates, names, ids, labels, or statuses.
     * @param version Cromwell API Version (required)
     * @param parameters Same query parameters as GET /query endpoint, submitted as a json list. Example: [{\&quot;status\&quot;:\&quot;Success\&quot;},{\&quot;status\&quot;:\&quot;Failed\&quot;}]  (required)
     * @return WorkflowQueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowQueryResponse queryPost(String version, List<WorkflowQueryParameter> parameters) throws ApiException {
        ApiResponse<WorkflowQueryResponse> localVarResp = queryPostWithHttpInfo(version, parameters);
        return localVarResp.getData();
    }

    /**
     * Get workflows matching some criteria
     * Query workflows by start dates, end dates, names, ids, labels, or statuses.
     * @param version Cromwell API Version (required)
     * @param parameters Same query parameters as GET /query endpoint, submitted as a json list. Example: [{\&quot;status\&quot;:\&quot;Success\&quot;},{\&quot;status\&quot;:\&quot;Failed\&quot;}]  (required)
     * @return ApiResponse&lt;WorkflowQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowQueryResponse> queryPostWithHttpInfo(String version, List<WorkflowQueryParameter> parameters) throws ApiException {
        okhttp3.Call localVarCall = queryPostValidateBeforeCall(version, parameters, null);
        Type localVarReturnType = new TypeToken<WorkflowQueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get workflows matching some criteria (asynchronously)
     * Query workflows by start dates, end dates, names, ids, labels, or statuses.
     * @param version Cromwell API Version (required)
     * @param parameters Same query parameters as GET /query endpoint, submitted as a json list. Example: [{\&quot;status\&quot;:\&quot;Success\&quot;},{\&quot;status\&quot;:\&quot;Failed\&quot;}]  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryPostAsync(String version, List<WorkflowQueryParameter> parameters, final ApiCallback<WorkflowQueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryPostValidateBeforeCall(version, parameters, _callback);
        Type localVarReturnType = new TypeToken<WorkflowQueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releaseHold
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Workflow in terminal status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseHoldCall(String version, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workflows/{version}/{id}/releaseHold"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releaseHoldValidateBeforeCall(String version, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling releaseHold(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling releaseHold(Async)");
        }
        

        okhttp3.Call localVarCall = releaseHoldCall(version, id, _callback);
        return localVarCall;

    }

    /**
     * Switch a workflow from &#39;On Hold&#39; to &#39;Submitted&#39; status
     * Request Cromwell to release the hold on a workflow. It will switch the status of a workflow from &#39;On Hold&#39; to &#39;Submitted&#39; so it can be picked for running. For instance this might be necessary in cases where you have submitted a workflow with workflowOnHold &#x3D; true.
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @return WorkflowIdAndStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Workflow in terminal status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowIdAndStatus releaseHold(String version, String id) throws ApiException {
        ApiResponse<WorkflowIdAndStatus> localVarResp = releaseHoldWithHttpInfo(version, id);
        return localVarResp.getData();
    }

    /**
     * Switch a workflow from &#39;On Hold&#39; to &#39;Submitted&#39; status
     * Request Cromwell to release the hold on a workflow. It will switch the status of a workflow from &#39;On Hold&#39; to &#39;Submitted&#39; so it can be picked for running. For instance this might be necessary in cases where you have submitted a workflow with workflowOnHold &#x3D; true.
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @return ApiResponse&lt;WorkflowIdAndStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Workflow in terminal status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowIdAndStatus> releaseHoldWithHttpInfo(String version, String id) throws ApiException {
        okhttp3.Call localVarCall = releaseHoldValidateBeforeCall(version, id, null);
        Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Switch a workflow from &#39;On Hold&#39; to &#39;Submitted&#39; status (asynchronously)
     * Request Cromwell to release the hold on a workflow. It will switch the status of a workflow from &#39;On Hold&#39; to &#39;Submitted&#39; so it can be picked for running. For instance this might be necessary in cases where you have submitted a workflow with workflowOnHold &#x3D; true.
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Workflow in terminal status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseHoldAsync(String version, String id, final ApiCallback<WorkflowIdAndStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = releaseHoldValidateBeforeCall(version, id, _callback);
        Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for status
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusCall(String version, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workflows/{version}/{id}/status"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusValidateBeforeCall(String version, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling status(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling status(Async)");
        }
        

        okhttp3.Call localVarCall = statusCall(version, id, _callback);
        return localVarCall;

    }

    /**
     * Retrieves the current state for a workflow
     * 
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @return WorkflowIdAndStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowIdAndStatus status(String version, String id) throws ApiException {
        ApiResponse<WorkflowIdAndStatus> localVarResp = statusWithHttpInfo(version, id);
        return localVarResp.getData();
    }

    /**
     * Retrieves the current state for a workflow
     * 
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @return ApiResponse&lt;WorkflowIdAndStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowIdAndStatus> statusWithHttpInfo(String version, String id) throws ApiException {
        okhttp3.Call localVarCall = statusValidateBeforeCall(version, id, null);
        Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the current state for a workflow (asynchronously)
     * 
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusAsync(String version, String id, final ApiCallback<WorkflowIdAndStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusValidateBeforeCall(version, id, _callback);
        Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submit
     * @param version Cromwell API Version (required)
     * @param workflowSource The workflow source file to submit for execution. Either workflow source or workflow url is required. (optional)
     * @param workflowUrl URL which points to the workflow. Either workflow source or workflow url is required. (optional)
     * @param workflowOnHold Put workflow on hold upon submission. By default, it is taken as false. (optional)
     * @param workflowInputs JSON or YAML file containing the inputs as an object. For WDL workflows a skeleton file can be generated from WOMtool using the \\\&quot;inputs\\\&quot; subcommand. When multiple files are specified, in case of key conflicts between multiple input JSON files, higher values of x in workflowInputs_x override lower values. For example, an input specified in workflowInputs_3 will override an input with the same name in workflowInputs or workflowInputs_2. Similarly, an input key specified in workflowInputs_5 will override an identical input key in any other input file. (optional)
     * @param workflowInputs2 A second JSON or YAML file containing inputs. (optional)
     * @param workflowInputs3 A third JSON or YAML file containing inputs. (optional)
     * @param workflowInputs4 A fourth JSON or YAML file containing inputs. (optional)
     * @param workflowInputs5 A fifth JSON or YAML file containing inputs. (optional)
     * @param workflowOptions JSON file containing configuration options for the execution of this workflow. (optional)
     * @param workflowType The workflow language for the file you submitted. Cromwell currently supports WDL and CWL. (optional)
     * @param workflowRoot The root object to be run. Only necessary for CWL submissions containing multiple objects (in an array). (optional)
     * @param workflowTypeVersion The specification version for the workflow language being used. For WDL, Cromwell currently supports draft-2 and 1.0. For CWL, Cromwell currently supports v1.0. (optional)
     * @param labels JSON object of labels to apply to this workflow. (optional)
     * @param workflowDependencies ZIP file containing workflow source files that are used to resolve local imports. This zip bundle will be unpacked in a sandbox accessible to this workflow. (optional)
     * @param requestedWorkflowId An ID to ascribe to this workflow. Must be a JSON string in UUID-format. If not supplied a random ID will be generated for the workflow. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid submission request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitCall(String version, String workflowSource, String workflowUrl, Boolean workflowOnHold, String workflowInputs, String workflowInputs2, String workflowInputs3, String workflowInputs4, String workflowInputs5, String workflowOptions, String workflowType, String workflowRoot, String workflowTypeVersion, String labels, String workflowDependencies, String requestedWorkflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workflows/{version}"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workflowSource != null) {
            localVarFormParams.put("workflowSource", workflowSource);
        }

        if (workflowUrl != null) {
            localVarFormParams.put("workflowUrl", workflowUrl);
        }

        if (workflowOnHold != null) {
            localVarFormParams.put("workflowOnHold", workflowOnHold);
        }

        if (workflowInputs != null) {
            localVarFormParams.put("workflowInputs", workflowInputs);
        }

        if (workflowInputs2 != null) {
            localVarFormParams.put("workflowInputs_2", workflowInputs2);
        }

        if (workflowInputs3 != null) {
            localVarFormParams.put("workflowInputs_3", workflowInputs3);
        }

        if (workflowInputs4 != null) {
            localVarFormParams.put("workflowInputs_4", workflowInputs4);
        }

        if (workflowInputs5 != null) {
            localVarFormParams.put("workflowInputs_5", workflowInputs5);
        }

        if (workflowOptions != null) {
            localVarFormParams.put("workflowOptions", workflowOptions);
        }

        if (workflowType != null) {
            localVarFormParams.put("workflowType", workflowType);
        }

        if (workflowRoot != null) {
            localVarFormParams.put("workflowRoot", workflowRoot);
        }

        if (workflowTypeVersion != null) {
            localVarFormParams.put("workflowTypeVersion", workflowTypeVersion);
        }

        if (labels != null) {
            localVarFormParams.put("labels", labels);
        }

        if (workflowDependencies != null) {
            localVarFormParams.put("workflowDependencies", workflowDependencies);
        }

        if (requestedWorkflowId != null) {
            localVarFormParams.put("requestedWorkflowId", requestedWorkflowId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitValidateBeforeCall(String version, String workflowSource, String workflowUrl, Boolean workflowOnHold, String workflowInputs, String workflowInputs2, String workflowInputs3, String workflowInputs4, String workflowInputs5, String workflowOptions, String workflowType, String workflowRoot, String workflowTypeVersion, String labels, String workflowDependencies, String requestedWorkflowId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling submit(Async)");
        }
        

        okhttp3.Call localVarCall = submitCall(version, workflowSource, workflowUrl, workflowOnHold, workflowInputs, workflowInputs2, workflowInputs3, workflowInputs4, workflowInputs5, workflowOptions, workflowType, workflowRoot, workflowTypeVersion, labels, workflowDependencies, requestedWorkflowId, _callback);
        return localVarCall;

    }

    /**
     * Submit a workflow for execution
     * Submits a workflow to Cromwell. Note that this endpoint can accept an unlimited number of input files via workflowInputs_N but swagger needs them to be explicitly defined so we have provided 5 as an example.
     * @param version Cromwell API Version (required)
     * @param workflowSource The workflow source file to submit for execution. Either workflow source or workflow url is required. (optional)
     * @param workflowUrl URL which points to the workflow. Either workflow source or workflow url is required. (optional)
     * @param workflowOnHold Put workflow on hold upon submission. By default, it is taken as false. (optional)
     * @param workflowInputs JSON or YAML file containing the inputs as an object. For WDL workflows a skeleton file can be generated from WOMtool using the \\\&quot;inputs\\\&quot; subcommand. When multiple files are specified, in case of key conflicts between multiple input JSON files, higher values of x in workflowInputs_x override lower values. For example, an input specified in workflowInputs_3 will override an input with the same name in workflowInputs or workflowInputs_2. Similarly, an input key specified in workflowInputs_5 will override an identical input key in any other input file. (optional)
     * @param workflowInputs2 A second JSON or YAML file containing inputs. (optional)
     * @param workflowInputs3 A third JSON or YAML file containing inputs. (optional)
     * @param workflowInputs4 A fourth JSON or YAML file containing inputs. (optional)
     * @param workflowInputs5 A fifth JSON or YAML file containing inputs. (optional)
     * @param workflowOptions JSON file containing configuration options for the execution of this workflow. (optional)
     * @param workflowType The workflow language for the file you submitted. Cromwell currently supports WDL and CWL. (optional)
     * @param workflowRoot The root object to be run. Only necessary for CWL submissions containing multiple objects (in an array). (optional)
     * @param workflowTypeVersion The specification version for the workflow language being used. For WDL, Cromwell currently supports draft-2 and 1.0. For CWL, Cromwell currently supports v1.0. (optional)
     * @param labels JSON object of labels to apply to this workflow. (optional)
     * @param workflowDependencies ZIP file containing workflow source files that are used to resolve local imports. This zip bundle will be unpacked in a sandbox accessible to this workflow. (optional)
     * @param requestedWorkflowId An ID to ascribe to this workflow. Must be a JSON string in UUID-format. If not supplied a random ID will be generated for the workflow. (optional)
     * @return WorkflowIdAndStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid submission request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowIdAndStatus submit(String version, String workflowSource, String workflowUrl, Boolean workflowOnHold, String workflowInputs, String workflowInputs2, String workflowInputs3, String workflowInputs4, String workflowInputs5, String workflowOptions, String workflowType, String workflowRoot, String workflowTypeVersion, String labels, String workflowDependencies, String requestedWorkflowId) throws ApiException {
        ApiResponse<WorkflowIdAndStatus> localVarResp = submitWithHttpInfo(version, workflowSource, workflowUrl, workflowOnHold, workflowInputs, workflowInputs2, workflowInputs3, workflowInputs4, workflowInputs5, workflowOptions, workflowType, workflowRoot, workflowTypeVersion, labels, workflowDependencies, requestedWorkflowId);
        return localVarResp.getData();
    }

    /**
     * Submit a workflow for execution
     * Submits a workflow to Cromwell. Note that this endpoint can accept an unlimited number of input files via workflowInputs_N but swagger needs them to be explicitly defined so we have provided 5 as an example.
     * @param version Cromwell API Version (required)
     * @param workflowSource The workflow source file to submit for execution. Either workflow source or workflow url is required. (optional)
     * @param workflowUrl URL which points to the workflow. Either workflow source or workflow url is required. (optional)
     * @param workflowOnHold Put workflow on hold upon submission. By default, it is taken as false. (optional)
     * @param workflowInputs JSON or YAML file containing the inputs as an object. For WDL workflows a skeleton file can be generated from WOMtool using the \\\&quot;inputs\\\&quot; subcommand. When multiple files are specified, in case of key conflicts between multiple input JSON files, higher values of x in workflowInputs_x override lower values. For example, an input specified in workflowInputs_3 will override an input with the same name in workflowInputs or workflowInputs_2. Similarly, an input key specified in workflowInputs_5 will override an identical input key in any other input file. (optional)
     * @param workflowInputs2 A second JSON or YAML file containing inputs. (optional)
     * @param workflowInputs3 A third JSON or YAML file containing inputs. (optional)
     * @param workflowInputs4 A fourth JSON or YAML file containing inputs. (optional)
     * @param workflowInputs5 A fifth JSON or YAML file containing inputs. (optional)
     * @param workflowOptions JSON file containing configuration options for the execution of this workflow. (optional)
     * @param workflowType The workflow language for the file you submitted. Cromwell currently supports WDL and CWL. (optional)
     * @param workflowRoot The root object to be run. Only necessary for CWL submissions containing multiple objects (in an array). (optional)
     * @param workflowTypeVersion The specification version for the workflow language being used. For WDL, Cromwell currently supports draft-2 and 1.0. For CWL, Cromwell currently supports v1.0. (optional)
     * @param labels JSON object of labels to apply to this workflow. (optional)
     * @param workflowDependencies ZIP file containing workflow source files that are used to resolve local imports. This zip bundle will be unpacked in a sandbox accessible to this workflow. (optional)
     * @param requestedWorkflowId An ID to ascribe to this workflow. Must be a JSON string in UUID-format. If not supplied a random ID will be generated for the workflow. (optional)
     * @return ApiResponse&lt;WorkflowIdAndStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid submission request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowIdAndStatus> submitWithHttpInfo(String version, String workflowSource, String workflowUrl, Boolean workflowOnHold, String workflowInputs, String workflowInputs2, String workflowInputs3, String workflowInputs4, String workflowInputs5, String workflowOptions, String workflowType, String workflowRoot, String workflowTypeVersion, String labels, String workflowDependencies, String requestedWorkflowId) throws ApiException {
        okhttp3.Call localVarCall = submitValidateBeforeCall(version, workflowSource, workflowUrl, workflowOnHold, workflowInputs, workflowInputs2, workflowInputs3, workflowInputs4, workflowInputs5, workflowOptions, workflowType, workflowRoot, workflowTypeVersion, labels, workflowDependencies, requestedWorkflowId, null);
        Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a workflow for execution (asynchronously)
     * Submits a workflow to Cromwell. Note that this endpoint can accept an unlimited number of input files via workflowInputs_N but swagger needs them to be explicitly defined so we have provided 5 as an example.
     * @param version Cromwell API Version (required)
     * @param workflowSource The workflow source file to submit for execution. Either workflow source or workflow url is required. (optional)
     * @param workflowUrl URL which points to the workflow. Either workflow source or workflow url is required. (optional)
     * @param workflowOnHold Put workflow on hold upon submission. By default, it is taken as false. (optional)
     * @param workflowInputs JSON or YAML file containing the inputs as an object. For WDL workflows a skeleton file can be generated from WOMtool using the \\\&quot;inputs\\\&quot; subcommand. When multiple files are specified, in case of key conflicts between multiple input JSON files, higher values of x in workflowInputs_x override lower values. For example, an input specified in workflowInputs_3 will override an input with the same name in workflowInputs or workflowInputs_2. Similarly, an input key specified in workflowInputs_5 will override an identical input key in any other input file. (optional)
     * @param workflowInputs2 A second JSON or YAML file containing inputs. (optional)
     * @param workflowInputs3 A third JSON or YAML file containing inputs. (optional)
     * @param workflowInputs4 A fourth JSON or YAML file containing inputs. (optional)
     * @param workflowInputs5 A fifth JSON or YAML file containing inputs. (optional)
     * @param workflowOptions JSON file containing configuration options for the execution of this workflow. (optional)
     * @param workflowType The workflow language for the file you submitted. Cromwell currently supports WDL and CWL. (optional)
     * @param workflowRoot The root object to be run. Only necessary for CWL submissions containing multiple objects (in an array). (optional)
     * @param workflowTypeVersion The specification version for the workflow language being used. For WDL, Cromwell currently supports draft-2 and 1.0. For CWL, Cromwell currently supports v1.0. (optional)
     * @param labels JSON object of labels to apply to this workflow. (optional)
     * @param workflowDependencies ZIP file containing workflow source files that are used to resolve local imports. This zip bundle will be unpacked in a sandbox accessible to this workflow. (optional)
     * @param requestedWorkflowId An ID to ascribe to this workflow. Must be a JSON string in UUID-format. If not supplied a random ID will be generated for the workflow. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid submission request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitAsync(String version, String workflowSource, String workflowUrl, Boolean workflowOnHold, String workflowInputs, String workflowInputs2, String workflowInputs3, String workflowInputs4, String workflowInputs5, String workflowOptions, String workflowType, String workflowRoot, String workflowTypeVersion, String labels, String workflowDependencies, String requestedWorkflowId, final ApiCallback<WorkflowIdAndStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitValidateBeforeCall(version, workflowSource, workflowUrl, workflowOnHold, workflowInputs, workflowInputs2, workflowInputs3, workflowInputs4, workflowInputs5, workflowOptions, workflowType, workflowRoot, workflowTypeVersion, labels, workflowDependencies, requestedWorkflowId, _callback);
        Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitBatch
     * @param version Cromwell API Version (required)
     * @param workflowInputs JSON file containing the inputs as an array of objects. Every element of the array will correspond to a single workflow. For WDL workflows a skeleton file can be generated from WOMtool using the \\\&quot;inputs\\\&quot; subcommand. When multiple files are specified, in case of key conflicts between multiple input JSON files, higher values of x in workflowInputs_x override lower values. For example, an input specified in workflowInputs_3 will override an input with the same name in workflowInputs or workflowInputs_2. Similarly, an input key specified in workflowInputs_5 will override an identical input key in any other input file. (required)
     * @param workflowSource The workflow source file to submit for execution. Either workflow source or workflow url is required. (optional)
     * @param workflowUrl URL which points to the workflow. Either workflow source or workflow url is required. (optional)
     * @param workflowOnHold Put workflow on hold upon submission. By default, it is taken as false. (optional)
     * @param workflowOptions JSON file containing configuration options for the execution of this workflow. (optional)
     * @param workflowType The workflow language for the file you submitted. Cromwell currently supports WDL and CWL. (optional)
     * @param workflowTypeVersion The specification version for the workflow language being used. For WDL, Cromwell currently supports draft-2 and 1.0. For CWL, Cromwell currently supports v1.0. (optional)
     * @param labels JSON object of labels to apply to this workflow. (optional)
     * @param workflowDependencies ZIP file containing workflow source files that are used to resolve local imports. This zip bundle will be unpacked in a sandbox accessible to these workflows. (optional)
     * @param requestedWorkflowId A set of IDs to ascribe to these workflows. Must be a JSON list of strings in UUID-format. Must have the same number of entries and be in the same order as the workflow inputs list. If not supplied, random ID will be generated for the workflows. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitBatchCall(String version, String workflowInputs, String workflowSource, String workflowUrl, Boolean workflowOnHold, String workflowOptions, String workflowType, String workflowTypeVersion, String labels, String workflowDependencies, String requestedWorkflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workflows/{version}/batch"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workflowSource != null) {
            localVarFormParams.put("workflowSource", workflowSource);
        }

        if (workflowUrl != null) {
            localVarFormParams.put("workflowUrl", workflowUrl);
        }

        if (workflowOnHold != null) {
            localVarFormParams.put("workflowOnHold", workflowOnHold);
        }

        if (workflowInputs != null) {
            localVarFormParams.put("workflowInputs", workflowInputs);
        }

        if (workflowOptions != null) {
            localVarFormParams.put("workflowOptions", workflowOptions);
        }

        if (workflowType != null) {
            localVarFormParams.put("workflowType", workflowType);
        }

        if (workflowTypeVersion != null) {
            localVarFormParams.put("workflowTypeVersion", workflowTypeVersion);
        }

        if (labels != null) {
            localVarFormParams.put("labels", labels);
        }

        if (workflowDependencies != null) {
            localVarFormParams.put("workflowDependencies", workflowDependencies);
        }

        if (requestedWorkflowId != null) {
            localVarFormParams.put("requestedWorkflowId", requestedWorkflowId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitBatchValidateBeforeCall(String version, String workflowInputs, String workflowSource, String workflowUrl, Boolean workflowOnHold, String workflowOptions, String workflowType, String workflowTypeVersion, String labels, String workflowDependencies, String requestedWorkflowId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling submitBatch(Async)");
        }
        
        // verify the required parameter 'workflowInputs' is set
        if (workflowInputs == null) {
            throw new ApiException("Missing the required parameter 'workflowInputs' when calling submitBatch(Async)");
        }
        

        okhttp3.Call localVarCall = submitBatchCall(version, workflowInputs, workflowSource, workflowUrl, workflowOnHold, workflowOptions, workflowType, workflowTypeVersion, labels, workflowDependencies, requestedWorkflowId, _callback);
        return localVarCall;

    }

    /**
     * Submit a batch of workflows for execution
     * In instances where you want to run the same workflow multiple times with varying inputs you may submit a workflow batch. This endpoint is fundamentally the same as the standard submission endpoint with the exception that the inputs JSON will be an array of objects instead of a single object.
     * @param version Cromwell API Version (required)
     * @param workflowInputs JSON file containing the inputs as an array of objects. Every element of the array will correspond to a single workflow. For WDL workflows a skeleton file can be generated from WOMtool using the \\\&quot;inputs\\\&quot; subcommand. When multiple files are specified, in case of key conflicts between multiple input JSON files, higher values of x in workflowInputs_x override lower values. For example, an input specified in workflowInputs_3 will override an input with the same name in workflowInputs or workflowInputs_2. Similarly, an input key specified in workflowInputs_5 will override an identical input key in any other input file. (required)
     * @param workflowSource The workflow source file to submit for execution. Either workflow source or workflow url is required. (optional)
     * @param workflowUrl URL which points to the workflow. Either workflow source or workflow url is required. (optional)
     * @param workflowOnHold Put workflow on hold upon submission. By default, it is taken as false. (optional)
     * @param workflowOptions JSON file containing configuration options for the execution of this workflow. (optional)
     * @param workflowType The workflow language for the file you submitted. Cromwell currently supports WDL and CWL. (optional)
     * @param workflowTypeVersion The specification version for the workflow language being used. For WDL, Cromwell currently supports draft-2 and 1.0. For CWL, Cromwell currently supports v1.0. (optional)
     * @param labels JSON object of labels to apply to this workflow. (optional)
     * @param workflowDependencies ZIP file containing workflow source files that are used to resolve local imports. This zip bundle will be unpacked in a sandbox accessible to these workflows. (optional)
     * @param requestedWorkflowId A set of IDs to ascribe to these workflows. Must be a JSON list of strings in UUID-format. Must have the same number of entries and be in the same order as the workflow inputs list. If not supplied, random ID will be generated for the workflows. (optional)
     * @return List&lt;WorkflowIdAndStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public List<WorkflowIdAndStatus> submitBatch(String version, String workflowInputs, String workflowSource, String workflowUrl, Boolean workflowOnHold, String workflowOptions, String workflowType, String workflowTypeVersion, String labels, String workflowDependencies, String requestedWorkflowId) throws ApiException {
        ApiResponse<List<WorkflowIdAndStatus>> localVarResp = submitBatchWithHttpInfo(version, workflowInputs, workflowSource, workflowUrl, workflowOnHold, workflowOptions, workflowType, workflowTypeVersion, labels, workflowDependencies, requestedWorkflowId);
        return localVarResp.getData();
    }

    /**
     * Submit a batch of workflows for execution
     * In instances where you want to run the same workflow multiple times with varying inputs you may submit a workflow batch. This endpoint is fundamentally the same as the standard submission endpoint with the exception that the inputs JSON will be an array of objects instead of a single object.
     * @param version Cromwell API Version (required)
     * @param workflowInputs JSON file containing the inputs as an array of objects. Every element of the array will correspond to a single workflow. For WDL workflows a skeleton file can be generated from WOMtool using the \\\&quot;inputs\\\&quot; subcommand. When multiple files are specified, in case of key conflicts between multiple input JSON files, higher values of x in workflowInputs_x override lower values. For example, an input specified in workflowInputs_3 will override an input with the same name in workflowInputs or workflowInputs_2. Similarly, an input key specified in workflowInputs_5 will override an identical input key in any other input file. (required)
     * @param workflowSource The workflow source file to submit for execution. Either workflow source or workflow url is required. (optional)
     * @param workflowUrl URL which points to the workflow. Either workflow source or workflow url is required. (optional)
     * @param workflowOnHold Put workflow on hold upon submission. By default, it is taken as false. (optional)
     * @param workflowOptions JSON file containing configuration options for the execution of this workflow. (optional)
     * @param workflowType The workflow language for the file you submitted. Cromwell currently supports WDL and CWL. (optional)
     * @param workflowTypeVersion The specification version for the workflow language being used. For WDL, Cromwell currently supports draft-2 and 1.0. For CWL, Cromwell currently supports v1.0. (optional)
     * @param labels JSON object of labels to apply to this workflow. (optional)
     * @param workflowDependencies ZIP file containing workflow source files that are used to resolve local imports. This zip bundle will be unpacked in a sandbox accessible to these workflows. (optional)
     * @param requestedWorkflowId A set of IDs to ascribe to these workflows. Must be a JSON list of strings in UUID-format. Must have the same number of entries and be in the same order as the workflow inputs list. If not supplied, random ID will be generated for the workflows. (optional)
     * @return ApiResponse&lt;List&lt;WorkflowIdAndStatus&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WorkflowIdAndStatus>> submitBatchWithHttpInfo(String version, String workflowInputs, String workflowSource, String workflowUrl, Boolean workflowOnHold, String workflowOptions, String workflowType, String workflowTypeVersion, String labels, String workflowDependencies, String requestedWorkflowId) throws ApiException {
        okhttp3.Call localVarCall = submitBatchValidateBeforeCall(version, workflowInputs, workflowSource, workflowUrl, workflowOnHold, workflowOptions, workflowType, workflowTypeVersion, labels, workflowDependencies, requestedWorkflowId, null);
        Type localVarReturnType = new TypeToken<List<WorkflowIdAndStatus>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a batch of workflows for execution (asynchronously)
     * In instances where you want to run the same workflow multiple times with varying inputs you may submit a workflow batch. This endpoint is fundamentally the same as the standard submission endpoint with the exception that the inputs JSON will be an array of objects instead of a single object.
     * @param version Cromwell API Version (required)
     * @param workflowInputs JSON file containing the inputs as an array of objects. Every element of the array will correspond to a single workflow. For WDL workflows a skeleton file can be generated from WOMtool using the \\\&quot;inputs\\\&quot; subcommand. When multiple files are specified, in case of key conflicts between multiple input JSON files, higher values of x in workflowInputs_x override lower values. For example, an input specified in workflowInputs_3 will override an input with the same name in workflowInputs or workflowInputs_2. Similarly, an input key specified in workflowInputs_5 will override an identical input key in any other input file. (required)
     * @param workflowSource The workflow source file to submit for execution. Either workflow source or workflow url is required. (optional)
     * @param workflowUrl URL which points to the workflow. Either workflow source or workflow url is required. (optional)
     * @param workflowOnHold Put workflow on hold upon submission. By default, it is taken as false. (optional)
     * @param workflowOptions JSON file containing configuration options for the execution of this workflow. (optional)
     * @param workflowType The workflow language for the file you submitted. Cromwell currently supports WDL and CWL. (optional)
     * @param workflowTypeVersion The specification version for the workflow language being used. For WDL, Cromwell currently supports draft-2 and 1.0. For CWL, Cromwell currently supports v1.0. (optional)
     * @param labels JSON object of labels to apply to this workflow. (optional)
     * @param workflowDependencies ZIP file containing workflow source files that are used to resolve local imports. This zip bundle will be unpacked in a sandbox accessible to these workflows. (optional)
     * @param requestedWorkflowId A set of IDs to ascribe to these workflows. Must be a JSON list of strings in UUID-format. Must have the same number of entries and be in the same order as the workflow inputs list. If not supplied, random ID will be generated for the workflows. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitBatchAsync(String version, String workflowInputs, String workflowSource, String workflowUrl, Boolean workflowOnHold, String workflowOptions, String workflowType, String workflowTypeVersion, String labels, String workflowDependencies, String requestedWorkflowId, final ApiCallback<List<WorkflowIdAndStatus>> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitBatchValidateBeforeCall(version, workflowInputs, workflowSource, workflowUrl, workflowOnHold, workflowOptions, workflowType, workflowTypeVersion, labels, workflowDependencies, requestedWorkflowId, _callback);
        Type localVarReturnType = new TypeToken<List<WorkflowIdAndStatus>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timing
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timingCall(String version, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/workflows/{version}/{id}/timing"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timingValidateBeforeCall(String version, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling timing(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling timing(Async)");
        }
        

        okhttp3.Call localVarCall = timingCall(version, id, _callback);
        return localVarCall;

    }

    /**
     * Get a visual diagram of a running workflow
     * Returns a javascript file which will render a Gantt chart for the requested workflow. The bars in the chart represent start and end times for individual task invocations. This javascript is intended to be embedded into another web page.
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @return WorkflowIdAndStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowIdAndStatus timing(String version, String id) throws ApiException {
        ApiResponse<WorkflowIdAndStatus> localVarResp = timingWithHttpInfo(version, id);
        return localVarResp.getData();
    }

    /**
     * Get a visual diagram of a running workflow
     * Returns a javascript file which will render a Gantt chart for the requested workflow. The bars in the chart represent start and end times for individual task invocations. This javascript is intended to be embedded into another web page.
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @return ApiResponse&lt;WorkflowIdAndStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowIdAndStatus> timingWithHttpInfo(String version, String id) throws ApiException {
        okhttp3.Call localVarCall = timingValidateBeforeCall(version, id, null);
        Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a visual diagram of a running workflow (asynchronously)
     * Returns a javascript file which will render a Gantt chart for the requested workflow. The bars in the chart represent start and end times for individual task invocations. This javascript is intended to be embedded into another web page.
     * @param version Cromwell API Version (required)
     * @param id A workflow ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timingAsync(String version, String id, final ApiCallback<WorkflowIdAndStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = timingValidateBeforeCall(version, id, _callback);
        Type localVarReturnType = new TypeToken<WorkflowIdAndStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLabels
     * @param version Cromwell API Version (required)
     * @param id Workflow ID (required)
     * @param labels Custom labels submitted as JSON. Example: {\&quot;key-1\&quot;:\&quot;value-1\&quot;,\&quot;key-2\&quot;:\&quot;value-2\&quot;}  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Workflow in terminal status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLabelsCall(String version, String id, Object labels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = labels;

        // create path and map variables
        String localVarPath = "/api/workflows/{version}/{id}/labels"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLabelsValidateBeforeCall(String version, String id, Object labels, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateLabels(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateLabels(Async)");
        }
        
        // verify the required parameter 'labels' is set
        if (labels == null) {
            throw new ApiException("Missing the required parameter 'labels' when calling updateLabels(Async)");
        }
        

        okhttp3.Call localVarCall = updateLabelsCall(version, id, labels, _callback);
        return localVarCall;

    }

    /**
     * Update labels for a workflow
     * Update multiple labels for an existing workflow. When supplying a label with a key unique to the workflow submission, a new label key/value entry is appended to that workflow&#39;s metadata. When supplying a label with a key that is already associated to the workflow submission, the original label value is updated with the new value for that workflow&#39;s metadata.
     * @param version Cromwell API Version (required)
     * @param id Workflow ID (required)
     * @param labels Custom labels submitted as JSON. Example: {\&quot;key-1\&quot;:\&quot;value-1\&quot;,\&quot;key-2\&quot;:\&quot;value-2\&quot;}  (required)
     * @return LabelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Workflow in terminal status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public LabelsResponse updateLabels(String version, String id, Object labels) throws ApiException {
        ApiResponse<LabelsResponse> localVarResp = updateLabelsWithHttpInfo(version, id, labels);
        return localVarResp.getData();
    }

    /**
     * Update labels for a workflow
     * Update multiple labels for an existing workflow. When supplying a label with a key unique to the workflow submission, a new label key/value entry is appended to that workflow&#39;s metadata. When supplying a label with a key that is already associated to the workflow submission, the original label value is updated with the new value for that workflow&#39;s metadata.
     * @param version Cromwell API Version (required)
     * @param id Workflow ID (required)
     * @param labels Custom labels submitted as JSON. Example: {\&quot;key-1\&quot;:\&quot;value-1\&quot;,\&quot;key-2\&quot;:\&quot;value-2\&quot;}  (required)
     * @return ApiResponse&lt;LabelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Workflow in terminal status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelsResponse> updateLabelsWithHttpInfo(String version, String id, Object labels) throws ApiException {
        okhttp3.Call localVarCall = updateLabelsValidateBeforeCall(version, id, labels, null);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update labels for a workflow (asynchronously)
     * Update multiple labels for an existing workflow. When supplying a label with a key unique to the workflow submission, a new label key/value entry is appended to that workflow&#39;s metadata. When supplying a label with a key that is already associated to the workflow submission, the original label value is updated with the new value for that workflow&#39;s metadata.
     * @param version Cromwell API Version (required)
     * @param id Workflow ID (required)
     * @param labels Custom labels submitted as JSON. Example: {\&quot;key-1\&quot;:\&quot;value-1\&quot;,\&quot;key-2\&quot;:\&quot;value-2\&quot;}  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Malformed Workflow ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Workflow in terminal status </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workflow ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLabelsAsync(String version, String id, Object labels, final ApiCallback<LabelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLabelsValidateBeforeCall(version, id, labels, _callback);
        Type localVarReturnType = new TypeToken<LabelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
