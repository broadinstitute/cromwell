name: unexpected_subworkflow_call_input_failure
testFormat: workflowfailure
tags: [subworkflow]

files {
  workflow: unexpected_subworkflow_call_input_failure/unexpected_subworkflow_call_input_failure.wdl
  imports: [ unexpected_subworkflow_call_input_failure/unexpected_subworkflow_call_input_failure_import.wdl ]
}

metadata {
    status: Failed
    "failures.0.message": "Workflow input processing failed"
    "failures.0.causedBy.0.message": "ERROR: Call supplied an unexpected input: The 'subwf' task doesn't have an input called 'j':\n\n  call subwf.subwf { input: i = 10, j = 20 }\n                                    ^\n\nOptions:\n - Add the input 'j' to the 'subwf' task (defined on line 1).\n - When calling a workflow, values that depend on previous values are considered intermediate values rather than overridable inputs.\n  - You can allow overriding intermediate values by having an optional override input and a select_first, eg:\n     # This is an optional input to the workflow:\n     Int? override_x\n\n     # This is a value based on some upstream task or declaration:\n     Int some_previous_result = ...\n\n     # This allows us to override an upstream result with override_x, or just use the previous result otherwise:\n     Int x = select_first(override_x, some_previous_result)\n\n - Remove 'j = ...' from subwf's inputs (on line 4).\n     "
}
