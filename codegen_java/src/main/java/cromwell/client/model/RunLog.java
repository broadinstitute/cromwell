/*
 * Cromwell Server REST API
 * Describes the REST API provided by a Cromwell server
 *
 * The version of the OpenAPI document: 30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cromwell.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import cromwell.client.model.Log;
import cromwell.client.model.RunRequest;
import cromwell.client.model.State;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import cromwell.client.JSON;

/**
 * RunLog
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-27T17:48:17.553365Z[Etc/UTC]")
public class RunLog {
  public static final String SERIALIZED_NAME_RUN_ID = "run_id";
  @SerializedName(SERIALIZED_NAME_RUN_ID)
  private String runId;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private RunRequest request;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private State state;

  public static final String SERIALIZED_NAME_RUN_LOG = "run_log";
  @SerializedName(SERIALIZED_NAME_RUN_LOG)
  private Log runLog;

  public static final String SERIALIZED_NAME_TASK_LOGS = "task_logs";
  @SerializedName(SERIALIZED_NAME_TASK_LOGS)
  private List<Log> taskLogs = null;

  public static final String SERIALIZED_NAME_OUTPUTS = "outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private Object outputs;

  public RunLog() {
  }

  public RunLog runId(String runId) {
    
    this.runId = runId;
    return this;
  }

   /**
   * workflow run ID
   * @return runId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "workflow run ID")

  public String getRunId() {
    return runId;
  }


  public void setRunId(String runId) {
    this.runId = runId;
  }


  public RunLog request(RunRequest request) {
    
    this.request = request;
    return this;
  }

   /**
   * Get request
   * @return request
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RunRequest getRequest() {
    return request;
  }


  public void setRequest(RunRequest request) {
    this.request = request;
  }


  public RunLog state(State state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public State getState() {
    return state;
  }


  public void setState(State state) {
    this.state = state;
  }


  public RunLog runLog(Log runLog) {
    
    this.runLog = runLog;
    return this;
  }

   /**
   * Get runLog
   * @return runLog
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Log getRunLog() {
    return runLog;
  }


  public void setRunLog(Log runLog) {
    this.runLog = runLog;
  }


  public RunLog taskLogs(List<Log> taskLogs) {
    
    this.taskLogs = taskLogs;
    return this;
  }

  public RunLog addTaskLogsItem(Log taskLogsItem) {
    if (this.taskLogs == null) {
      this.taskLogs = new ArrayList<>();
    }
    this.taskLogs.add(taskLogsItem);
    return this;
  }

   /**
   * The logs, and other key info like timing and exit code, for each step in the workflow run.
   * @return taskLogs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The logs, and other key info like timing and exit code, for each step in the workflow run.")

  public List<Log> getTaskLogs() {
    return taskLogs;
  }


  public void setTaskLogs(List<Log> taskLogs) {
    this.taskLogs = taskLogs;
  }


  public RunLog outputs(Object outputs) {
    
    this.outputs = outputs;
    return this;
  }

   /**
   * The outputs from the workflow run.
   * @return outputs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The outputs from the workflow run.")

  public Object getOutputs() {
    return outputs;
  }


  public void setOutputs(Object outputs) {
    this.outputs = outputs;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public RunLog putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunLog runLog = (RunLog) o;
    return Objects.equals(this.runId, runLog.runId) &&
        Objects.equals(this.request, runLog.request) &&
        Objects.equals(this.state, runLog.state) &&
        Objects.equals(this.runLog, runLog.runLog) &&
        Objects.equals(this.taskLogs, runLog.taskLogs) &&
        Objects.equals(this.outputs, runLog.outputs)&&
        Objects.equals(this.additionalProperties, runLog.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(runId, request, state, runLog, taskLogs, outputs, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunLog {\n");
    sb.append("    runId: ").append(toIndentedString(runId)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    runLog: ").append(toIndentedString(runLog)).append("\n");
    sb.append("    taskLogs: ").append(toIndentedString(taskLogs)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("run_id");
    openapiFields.add("request");
    openapiFields.add("state");
    openapiFields.add("run_log");
    openapiFields.add("task_logs");
    openapiFields.add("outputs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RunLog
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (RunLog.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunLog is not found in the empty JSON string", RunLog.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("run_id") != null && !jsonObj.get("run_id").isJsonNull()) && !jsonObj.get("run_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `run_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("run_id").toString()));
      }
      // validate the optional field `request`
      if (jsonObj.get("request") != null && !jsonObj.get("request").isJsonNull()) {
        RunRequest.validateJsonObject(jsonObj.getAsJsonObject("request"));
      }
      // validate the optional field `run_log`
      if (jsonObj.get("run_log") != null && !jsonObj.get("run_log").isJsonNull()) {
        Log.validateJsonObject(jsonObj.getAsJsonObject("run_log"));
      }
      JsonArray jsonArraytaskLogs = jsonObj.getAsJsonArray("task_logs");
      if (jsonArraytaskLogs != null) {
        // ensure the json data is an array
        if (!jsonObj.get("task_logs").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `task_logs` to be an array in the JSON string but got `%s`", jsonObj.get("task_logs").toString()));
        }

        // validate the optional field `task_logs` (array)
        for (int i = 0; i < jsonArraytaskLogs.size(); i++) {
          Log.validateJsonObject(jsonArraytaskLogs.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunLog.class));

       return (TypeAdapter<T>) new TypeAdapter<RunLog>() {
           @Override
           public void write(JsonWriter out, RunLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RunLog read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RunLog instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RunLog given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RunLog
  * @throws IOException if the JSON string is invalid with respect to RunLog
  */
  public static RunLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunLog.class);
  }

 /**
  * Convert an instance of RunLog to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

