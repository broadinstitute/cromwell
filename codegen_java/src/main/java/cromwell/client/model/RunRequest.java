/*
 * Cromwell Server REST API
 * Describes the REST API provided by a Cromwell server
 *
 * The version of the OpenAPI document: 30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cromwell.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import cromwell.client.JSON;

/**
 * To execute a workflow, send a run request including all the details needed to begin downloading and executing a given workflow.
 */
@ApiModel(description = "To execute a workflow, send a run request including all the details needed to begin downloading and executing a given workflow.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-27T15:48:40.234026Z[Etc/UTC]")
public class RunRequest {
  public static final String SERIALIZED_NAME_WORKFLOW_PARAMS = "workflow_params";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_PARAMS)
  private Object workflowParams;

  public static final String SERIALIZED_NAME_WORKFLOW_TYPE = "workflow_type";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_TYPE)
  private String workflowType;

  public static final String SERIALIZED_NAME_WORKFLOW_TYPE_VERSION = "workflow_type_version";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_TYPE_VERSION)
  private String workflowTypeVersion;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = null;

  public static final String SERIALIZED_NAME_WORKFLOW_ENGINE_PARAMETERS = "workflow_engine_parameters";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_ENGINE_PARAMETERS)
  private Map<String, String> workflowEngineParameters = null;

  public static final String SERIALIZED_NAME_WORKFLOW_URL = "workflow_url";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_URL)
  private String workflowUrl;

  public RunRequest() {
  }

  public RunRequest workflowParams(Object workflowParams) {
    
    this.workflowParams = workflowParams;
    return this;
  }

   /**
   * REQUIRED The workflow run parameterizations (JSON encoded), including input and output file locations
   * @return workflowParams
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "REQUIRED The workflow run parameterizations (JSON encoded), including input and output file locations")

  public Object getWorkflowParams() {
    return workflowParams;
  }


  public void setWorkflowParams(Object workflowParams) {
    this.workflowParams = workflowParams;
  }


  public RunRequest workflowType(String workflowType) {
    
    this.workflowType = workflowType;
    return this;
  }

   /**
   * REQUIRED The workflow descriptor type, must be \&quot;CWL\&quot; or \&quot;WDL\&quot; currently (or another alternative supported by this WES instance)
   * @return workflowType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "REQUIRED The workflow descriptor type, must be \"CWL\" or \"WDL\" currently (or another alternative supported by this WES instance)")

  public String getWorkflowType() {
    return workflowType;
  }


  public void setWorkflowType(String workflowType) {
    this.workflowType = workflowType;
  }


  public RunRequest workflowTypeVersion(String workflowTypeVersion) {
    
    this.workflowTypeVersion = workflowTypeVersion;
    return this;
  }

   /**
   * REQUIRED The workflow descriptor type version, must be one supported by this WES instance
   * @return workflowTypeVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "REQUIRED The workflow descriptor type version, must be one supported by this WES instance")

  public String getWorkflowTypeVersion() {
    return workflowTypeVersion;
  }


  public void setWorkflowTypeVersion(String workflowTypeVersion) {
    this.workflowTypeVersion = workflowTypeVersion;
  }


  public RunRequest tags(Map<String, String> tags) {
    
    this.tags = tags;
    return this;
  }

  public RunRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getTags() {
    return tags;
  }


  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public RunRequest workflowEngineParameters(Map<String, String> workflowEngineParameters) {
    
    this.workflowEngineParameters = workflowEngineParameters;
    return this;
  }

  public RunRequest putWorkflowEngineParametersItem(String key, String workflowEngineParametersItem) {
    if (this.workflowEngineParameters == null) {
      this.workflowEngineParameters = new HashMap<>();
    }
    this.workflowEngineParameters.put(key, workflowEngineParametersItem);
    return this;
  }

   /**
   * Get workflowEngineParameters
   * @return workflowEngineParameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getWorkflowEngineParameters() {
    return workflowEngineParameters;
  }


  public void setWorkflowEngineParameters(Map<String, String> workflowEngineParameters) {
    this.workflowEngineParameters = workflowEngineParameters;
  }


  public RunRequest workflowUrl(String workflowUrl) {
    
    this.workflowUrl = workflowUrl;
    return this;
  }

   /**
   * REQUIRED The workflow CWL or WDL document. When &#x60;workflow_attachments&#x60; is used to attach files, the &#x60;workflow_url&#x60; may be a relative path to one of the attachments.
   * @return workflowUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "REQUIRED The workflow CWL or WDL document. When `workflow_attachments` is used to attach files, the `workflow_url` may be a relative path to one of the attachments.")

  public String getWorkflowUrl() {
    return workflowUrl;
  }


  public void setWorkflowUrl(String workflowUrl) {
    this.workflowUrl = workflowUrl;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public RunRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunRequest runRequest = (RunRequest) o;
    return Objects.equals(this.workflowParams, runRequest.workflowParams) &&
        Objects.equals(this.workflowType, runRequest.workflowType) &&
        Objects.equals(this.workflowTypeVersion, runRequest.workflowTypeVersion) &&
        Objects.equals(this.tags, runRequest.tags) &&
        Objects.equals(this.workflowEngineParameters, runRequest.workflowEngineParameters) &&
        Objects.equals(this.workflowUrl, runRequest.workflowUrl)&&
        Objects.equals(this.additionalProperties, runRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(workflowParams, workflowType, workflowTypeVersion, tags, workflowEngineParameters, workflowUrl, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunRequest {\n");
    sb.append("    workflowParams: ").append(toIndentedString(workflowParams)).append("\n");
    sb.append("    workflowType: ").append(toIndentedString(workflowType)).append("\n");
    sb.append("    workflowTypeVersion: ").append(toIndentedString(workflowTypeVersion)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    workflowEngineParameters: ").append(toIndentedString(workflowEngineParameters)).append("\n");
    sb.append("    workflowUrl: ").append(toIndentedString(workflowUrl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("workflow_params");
    openapiFields.add("workflow_type");
    openapiFields.add("workflow_type_version");
    openapiFields.add("tags");
    openapiFields.add("workflow_engine_parameters");
    openapiFields.add("workflow_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RunRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (RunRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunRequest is not found in the empty JSON string", RunRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("workflow_type") != null && !jsonObj.get("workflow_type").isJsonNull()) && !jsonObj.get("workflow_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflow_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflow_type").toString()));
      }
      if ((jsonObj.get("workflow_type_version") != null && !jsonObj.get("workflow_type_version").isJsonNull()) && !jsonObj.get("workflow_type_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflow_type_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflow_type_version").toString()));
      }
      if ((jsonObj.get("workflow_url") != null && !jsonObj.get("workflow_url").isJsonNull()) && !jsonObj.get("workflow_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflow_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflow_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RunRequest>() {
           @Override
           public void write(JsonWriter out, RunRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RunRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RunRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RunRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RunRequest
  * @throws IOException if the JSON string is invalid with respect to RunRequest
  */
  public static RunRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunRequest.class);
  }

 /**
  * Convert an instance of RunRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

